<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://shley8.github.io</id>
    <title>Shley8&apos;s Blogs</title>
    <updated>2020-10-18T03:06:13.166Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://shley8.github.io"/>
    <link rel="self" href="https://shley8.github.io/atom.xml"/>
    <subtitle>宛若新生</subtitle>
    <logo>https://shley8.github.io/images/avatar.png</logo>
    <icon>https://shley8.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Shley8&apos;s Blogs</rights>
    <entry>
        <title type="html"><![CDATA[第三章：学习周期四天（2020.10.18~2020.10.21，待观望...）]]></title>
        <id>https://shley8.github.io/post/di-san-zhang-20201018~20201021dai-guan-wang/</id>
        <link href="https://shley8.github.io/post/di-san-zhang-20201018~20201021dai-guan-wang/">
        </link>
        <updated>2020-10-18T03:01:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="主要内容">主要内容</h2>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第二章：学习周期一周（2020.10.09~2020.10.16，未完成❌）]]></title>
        <id>https://shley8.github.io/post/di-er-zhang/</id>
        <link href="https://shley8.github.io/post/di-er-zhang/">
        </link>
        <updated>2020-10-08T07:25:09.000Z</updated>
        <content type="html"><![CDATA[<p><strong>主要内容：文件的增（普通文件、目录文件）、删（普通文件、目录文件）、改（文件的内容、属性）、查（文件的内容、属性）操作，vim编辑器的使用（文件内容修改的内容），重定向和管道，通配符和正则表达式...</strong></p>
<h2 id="shell介绍">Shell介绍</h2>
<p>Shell主要分为两种，CLI（Conmand Line Inerface，命令行接口e）和GUI（Graphical User Interface，图形用户接口），操作系统的工作原理：用户 -&gt; Shell -&gt; Kernal（包含Drive可驱动硬件） -&gt; Hardware -&gt; 执行结果反馈给用户。</p>
<h2 id="linux各个目录的作用">Linux各个目录的作用</h2>
<hr>
<ul>
<li>root：root的家目录；</li>
<li>/home：用户的家目录（useradd user +passwd user，增加user用户并且修改user用户的密码）；</li>
<li>/boot：存放系统的启动配置文件和内核文件；</li>
<li>/usr：软件默认安装的地方；</li>
<li>/lib：存放的是32位的函数文件；</li>
<li>/lib64：存放的是64位的执行文件；</li>
<li>/bin：存放的是普通用户能执行的命令；</li>
<li>/sbin：存放的是超级用户能执行的命令；</li>
<li>/opt：存放软件的目录；</li>
<li>/dev：存放设备文件；</li>
<li>/etc：存放配置文件；</li>
<li>/media，/mnt，/run：挂载目录；</li>
<li>/proc：存放进程文件；</li>
<li>/srv：存放资源文件；</li>
<li>/sys：存放系统资源文件；</li>
<li>/tmp：存放临时文件（重要）；</li>
<li>/var：存放日志的文件（重要）；<br>
<strong>Linux中的带箭头的图标同Windows一样都是快捷方式（例如：/bin，/sbin，/lib，/lib64，指向/usr中的对应的文件）。</strong></li>
</ul>
<h2 id="命令">命令</h2>
<hr>
<h3 id="小技巧">小技巧</h3>
<ul>
<li>Ctrl +Shift + t 可创建多个shell界面；</li>
<li>Ctrl + d 可关闭多个shell界面；</li>
<li>Alt + &quot;1~9&quot;可在各个shell界面来回切换；</li>
<li>Ctrl + Shift +&quot;+&quot;（F12上面的而不是小键盘上面的）放大shell界面；</li>
<li>Ctrl + &quot;-&quot;（F12上面的而不是小键盘上面的）缩小shell界面；</li>
</ul>
<h3 id="suswitch-user">su（switch user）</h3>
<ul>
<li>切换用户记得带&quot;-&quot;，切换用户的时候连同环境变量一起切换了；</li>
<li>不要一直切换用户，因为每一次切换用户，都会在当前的shell界面再加上一个shell界面，会消耗内存（操作不规范，不建议这样操作），查看当前shell界面：pstree | grep bash；</li>
<li>root用户切换到其他用户是不需要输入密码的，其他用户切换到root用户需要输入密码；</li>
</ul>
<h3 id="cdchange-directory">cd（change directory）</h3>
<ul>
<li>cd ~：切换到当前用户的家目录；</li>
<li>cd -/cd ：切换到上次所在的目录（一直使用会在两个目录之间来回跳）；</li>
<li>cd ..：切换到上级目录；</li>
</ul>
<h3 id="lslist-文件属性查看">ls（list）-&gt;文件属性查看</h3>
<ul>
<li>ls + 目录会显示目录下的文件名，ls + 文件会显示此文件的名字；</li>
<li>-l：显示文件详情；</li>
<li>-h（human）：配合-l使用，以M（兆）的方式显示文件的大小（默认为Byte（比特））；</li>
<li>-a：显示隐藏文件（以.开头的文件）；</li>
<li>-d：只目录的情况，不显示目录下的文件；</li>
</ul>
<blockquote>
<p>使用ls -l查看文件属性时，会显示文件的一些属性信息，下面分别对信息进行分析：</p>
<blockquote>
<p>1.这个文件/目录是什么：“-”表示普通文件，“d”表示目录，“b”表示块设备（存储设备），“i”表示快捷方式（软链接）；<br>
2.“.”表示该文件具备SELinux的安全上下文，“+”表示该文件有ACL权限；<br>
3.文件的链接数量；<br>
4.文件所有者对文件的权限、文件所属组对文件的权限以及其他人对文件的权限；<br>
5.文件所有者，文件所属组；<br>
6.月日时分秒，表示时间（后面会继续谈的）；<br>
7.文件/目录名字；</p>
</blockquote>
</blockquote>
<h3 id="文件内容查看">文件内容查看</h3>
<ol>
<li>cat
<ul>
<li>cat  + 文件名，可打开文件，不输文件名，进入命令交互界面，你输入什么，他输什么；</li>
</ul>
</li>
<li>head（查看文件前面的内容，默认查看10行）
<ul>
<li>head -n 5 -&gt; 查看前五行 = head -h；</li>
</ul>
</li>
<li>tail （查看文件后面的内容，默认查看10行）
<ul>
<li>tail -n 5 -&gt; 查看后五行 = tail -h；</li>
<li>tailf = tail -f  -&gt; 不断查看文件后10行，多用于查看日志文件；</li>
</ul>
</li>
<li>more -&gt; 分页查看，只能往后翻；</li>
<li>less  -&gt; 分页查看，可以前后翻阅；</li>
</ol>
<h3 id="touch-文本文件的创建">touch -&gt; 文本文件的创建</h3>
<ul>
<li>touch一个已经存在的文件，会更新该文件的时间戳，内容不会改变</li>
</ul>
<h3 id="mdkirmake-directory-目录文件的创建">mdkir（make directory） -&gt; 目录文件的创建</h3>
<ul>
<li>直接使用mkdir不能在没上级目录的时候创建下级文件（无中生有）；</li>
<li>无中生有：mkdir -p /tmp/china/pd/pd-airport；</li>
</ul>
<h3 id="rmremove-文件目录的删除">rm（remove）-&gt; 文件/目录的删除</h3>
<ul>
<li>rm 默认只能删除文件；</li>
<li>-r 赋予rm删除删除目录的权限；</li>
<li>-i 提示是否删除文件/目录；</li>
<li>-f 强制删除不提示；</li>
</ul>
<h3 id="cpcopy-文件目录的复制">cp（copy）-&gt; 文件/目录的复制</h3>
<ul>
<li>cp默认不能复制目录，需要复制目录要加“-r”参数；</li>
<li>cp如果后面是一个不存在的文件名，那么会执行复制操作并且重命名；</li>
<li>-a 复制文件的所有属性（时间戳、文件的拥有者和用户组）；</li>
<li>-i 是否覆盖原文件；</li>
</ul>
<h3 id="通配符">通配符</h3>
<ul>
<li>？：表示匹配任意一个非空字符；</li>
<li>[]：括号内存在的字符（一个）；</li>
<li>[^]：括号内不存在的字符（一个）；</li>
<li>*：任意数量的任意字符；</li>
<li>\：转义字符，使得后面的字符是它本身的意思；</li>
<li>{1..100}：有顺序的排列 -&gt; touch aa{1..100} -&gt; 创建以aa开头，1~100结尾的100个文件；</li>
</ul>
<h2 id="vim的操作">Vim的操作</h2>
<hr>
<h3 id="命令模式">命令模式</h3>
<p>默认使用vim打开一个文本文件，进入的就是命令模式：</p>
<ul>
<li>hjkl：对应小键盘的左、下、上、右；</li>
<li>gg：鼠标光标切换到文本开头；</li>
<li>nG：鼠标光标切换到第n行开头；</li>
<li>x：删除鼠标光标的右边的文本；</li>
<li>X：删除鼠标光标左边的文本；</li>
<li>u：恢复上次操作的内容（理论上可以无限恢复，一直按住u即可）；</li>
</ul>
<hr>
<ul>
<li>dd：剪切光标当前这行；</li>
<li>ndd：剪切光标当前这行以及下面n-1行；</li>
<li>yy：复制光标当前这行；</li>
<li>nyy：复制光标当前这行以及下面n-1行；</li>
<li>p：将dd或yy的内容粘贴到当前行的下面；</li>
<li>P：将dd或yy的内容粘贴到当前行的上面；</li>
</ul>
<h3 id="插入模式">插入模式</h3>
<p>在命令模式下，输入i、I、a、A、o、O均可进入到插入模式：</p>
<ul>
<li>i：鼠标光标左侧开始插入文本内容；</li>
<li>I：鼠标行首开始插入内容；</li>
<li>a：鼠标光标右侧开始插入内容；</li>
<li>A：鼠标行尾开始插入内容；</li>
<li>o：鼠标当前行重启一行开始插入（下方）；</li>
<li>O：鼠标当前行上方重启一行开始插入；</li>
</ul>
<h3 id="末行模式">末行模式</h3>
<ul>
<li>在命令模式之下，输入“：”“/”进入末行模式；</li>
<li>输入“/”，再输入文本内容，即可在当前文本中高亮显示查找到的内容，回车即可高亮显示查找到的内容，n向下查看显示的内容，N向上查看显示的内容；</li>
<li>：w（write）：保存（写入）文件；</li>
<li>：q（quit）：退出文件；</li>
<li>：q！：强制退出，不会保存文件；</li>
<li>：wq=：x：保存并且退出  -&gt; 推荐使用：w和：q配合使用；</li>
<li>：set number（set nu）：显示行号；</li>
<li>：set nonumber（set nonu）：取消显示行号；</li>
</ul>
<h3 id="可视化模式">可视化模式</h3>
<p>输入v或者V进入可视化模式，或者输入Ctrl+v进入”矩形选择版本“的可视化模式，可用于文本的剪切等操作（和命令模式差不多其实）。</p>
<h3 id="vim文本替换操作">vim文本替换操作</h3>
<p>语法格式：&quot;:n1,n2s/old content/new content/global&quot;；</p>
<ul>
<li>n1：表示开始行；</li>
<li>n2：表示结束行，</li>
<li>global：可简写为b，不加此参数，替换操作只会在每行查找到的第一个字符进行替换操作；</li>
<li>:1,$s/123/456/g：把从全文（第一行开始到最后一行结束的“123”全部替换成“456”）；</li>
</ul>
<h3 id="vim的异常处理">vim的异常处理</h3>
<ul>
<li>在使用vim文本编辑器操作的时候，会在当前目录下生成一个.swp的文件，我们的操作是对这个swp文件进行操作的，当选择保存的时候，原文件会和swp文件进行比较，然后更新文件内容。</li>
<li>在当编辑的时候出现意外时，可恢复该文本文件内容，使用vim 编辑器编辑该文件，选择“r”，然后选择回车即可。</li>
</ul>
<hr>
<h2 id="重定向和管道">重定向和管道</h2>
<hr>
<h3 id="输出重定向">输出重定向</h3>
<ul>
<li>&gt;：正确的内容覆盖（创建）；</li>
</ul>
<blockquote>
<p>ls &gt; test.txt （将ls命令输出在桌面的内容，输出到text.txt里面）；</p>
</blockquote>
<ul>
<li>&gt;&gt;：正确的内容在原文本后面添加上；</li>
<li>2&gt;：错误的内容覆盖（创建）；</li>
</ul>
<blockquote>
<p>dsakdjsalk 2&gt; test.txt（将dsakdjsalk命令输出的内容，输出到test.txt文件里面，因为dsakdjsalk命令不存在。所以会报错）；</p>
</blockquote>
<ul>
<li>2&gt;&gt;：错误的内容在原文本后面添加上；</li>
<li>&amp;&gt;：不论是正确的还是错误的内容都覆盖（创建）；</li>
<li>&amp;&gt;&gt;：不论是正确还是错误的内容都在原文本内容后面加上；</li>
</ul>
<h3 id="输入重定向">输入重定向</h3>
<p>输入重定向的作用是把Linux下的交互式命令变成非交互时命令；<br>
Shell脚本其实就是Linux下的命令的集合，编写shell脚本的思想就是使用非交互式命令，这样脚本才能自己动起来，输入重定向为此做了很大的贡献；</p>
<ul>
<li>&lt;：使用mail命令可进行很好的实例操作，使用输入重定向可使交互式命令变成非交互式命令，从而可以直接发送邮件 ：</li>
</ul>
<blockquote>
<p>mail -s &quot;这是邮件的主题&quot;  shley  &lt; text.txt （shley是要发送的用户，text.txt是本来命令交互时需要用户输入的内容）；</p>
</blockquote>
<ul>
<li>&lt;&lt;：实际举例：</li>
</ul>
<blockquote>
<p>cat  &gt;  test.txt  &lt;&lt;finish（test.txt是需要输入的内容，输入finish结束）；</p>
</blockquote>
<h3 id="管道介绍">管道介绍</h3>
<ul>
<li>管道要有两个命令，一个是非交互式命令，另一个是交互式命令 -&gt; 例如：ls | cat；</li>
<li>前一个命令的输出作为另一个命令的输入；</li>
</ul>
<p>使用方法分析：</p>
<blockquote>
<p>编辑已知文件shley.txt，内容为“Hello”；<br>
echo shley.txt | cat -&gt; 输出shley.txt，首先输出shley.txt，然后进入cat命令，输入shley.txt，最后屏幕显示shley.txt；<br>
echo shley.txt | xargs cat -&gt;   输出”Hello“，首先输出shlet.txt，然后将输出作为参数输入cat，所以打开shley.txt文件，输出文件内容。、</p>
</blockquote>
<h3 id="grep命令">grep命令</h3>
<p>grep命令用来抓取文本文件中需要的内容；<br>
grep配合管道可抓取任意内容（文件和文本内容），因此十分强大；</p>
<ul>
<li>ls | grep test; -&gt; 抓取文件名包含test的文件（当前目录）；</li>
<li>ls | xargs grep test; -&gt;抓取文件内容包含test的文件（当前目录）；<br>
几个常用的命令（假设创建文件shley.txt）：</li>
<li>grep -i aaa shley.txt：不分大小写抓取shley.txt中aaa文本；</li>
<li>grep -v aaa shley.txt：抓取shley.txt文本中除了aaa的内容；</li>
<li>grep -n aaa shley.txt：抓取shley.txt文本中aaa且显示行号；</li>
<li>grep -A 2 aaa shley.txt：抓取shley.txt文本中aaa以及aaa的后两行（after）；</li>
<li>grep -B 2 aaa shley.txt：抓取shley.txt文本中aaa以及aaa的前两行（before）；</li>
</ul>
<h3 id="简单的正则表达式">简单的正则表达式</h3>
<p>正则表达式是对文本文件内容的操作，标识符是对文件名的操作（不绝对）；</p>
<ul>
<li>^：以什么什么开头；</li>
<li>$：以什么什么结尾；（空格可用“^$”表示）；</li>
<li>.：匹配任意一个非空字符；</li>
<li>.*：匹配所有；</li>
</ul>
<blockquote>
<p>一个简单的使用，要求过滤文本文件内的注释（以#开头）并且过滤空格：grep ^# -v test.txt | grep ^# -v -n ；</p>
</blockquote>
<h2 id="常用的快捷键">常用的快捷键</h2>
<ul>
<li>ctrl + l ：清屏；</li>
<li>ctrl + a：光标移到最左侧；</li>
<li>ctrl + e：光标移到最右侧；</li>
<li>ctrl + u：光标所在处的左侧内容全部删除；</li>
<li>ctrl + y：恢复操作；</li>
<li>ctrl + w：光标左侧删除一个word（单词）；</li>
<li>!+一个字母（或者开头）：运行history（记录使用过的命令，输入history即可显示）里面的最近的一个以那个字母（开头）的命令； -&gt; 除非你知道自己在做什么，否则 慎重使用。</li>
</ul>
<h2 id="其他">其他</h2>
<h3 id="随便玩玩">随便玩玩</h3>
<blockquote>
<p>while (true);do echo &quot;Shilei is a handsome boy&quot;;sleep 0.5;done</p>
</blockquote>
<h3 id="基础的一些入门指令">基础的一些入门指令</h3>
<blockquote>
<p>echo<br>
date<br>
hostname<br>
hostnamectl set-hostname [修改之后的主机名]<br>
bc （交互界面）<br>
expr （非交互界面）<br>
我是谁：whoami<br>
我在哪：pwd（print work directory）<br>
我要干嘛：</p>
</blockquote>
<h2 id="知识点总结">知识点总结</h2>
<ul>
<li>文件后缀名只是文件打开的方式，当文件创建的时候文件的类型就决定了（比如.txt文件后缀修改为.pdf是打不开的）；</li>
</ul>
<h2 id="20201009视频时间92min写博客20201010视频时间73min写博客20201013视频时间139min写博客20201014视频时间140min写博客20201015视频时间76min写博客20201016视频时间136min写博客20201017视频时间68min20201018视频时间87min写博客">2020.10.09：视频时间92min，写博客；<br>
2020.10.10：视频时间73min，写博客；<br>
2020.10.13：视频时间139min，写博客；<br>
2020.10.14：视频时间140min，写博客；<br>
2020.10.15：视频时间76min，写博客；<br>
2020.10.16：视频时间136min，写博客；<br>
2020.10.17：视频时间68min；<br>
2020.10.18：视频时间87min，写博客；</h2>
<p>需要加快进度了，懒懒散散不可取，比计划拖后两天完成（2020.10.18完成）。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一章：学习周期两周（2020.09.24~2020.10.8，完成进度✔）]]></title>
        <id>https://shley8.github.io/post/moudle1xue-xi-zhou-qi-2-zhou/</id>
        <link href="https://shley8.github.io/post/moudle1xue-xi-zhou-qi-2-zhou/">
        </link>
        <updated>2020-10-06T02:55:34.000Z</updated>
        <content type="html"><![CDATA[<p><strong>主要内容：本章主要介绍计算机的基础知识（计算机发展历史、操作系统的发展历史、服务器的基础知识等），以及Linux（Gun/Linux）操作系统的安装...</strong></p>
<h2 id="计算机的发展历史">计算机的发展历史</h2>
<p>计算机的主要功能就是做计算，早期计算机（其实可以称为计算器）是机械计算机，用户输入数据，输入运算符（加减乘除），随后计算机进行计算，输出结果；后来随着电子管的出现，出现了电子计算机（这时候的计算机才是能通电的）；再后来随着晶体管的出现，出现了晶体管计算机，晶体管计算机的出现使得计算机的性能有了飞速的增长（目前的计算机都是集成电路计算机，而集成电路组成的基本单元就是晶体管）。</p>
<h2 id="操作系统的发展历史">操作系统的发展历史</h2>
<p>早期人们将“把数据输入到计算机—输入运算符—计算机进行运算—输出运算结果”这套流程叫做OS（Operation System，操作系统），因为早期的“操作系统”的整个流程都是需要“人”去进行操作的，后来人们就想“能不能让计算机自己去处理这些事情”，于是乎操作系统的概念就有了：操作系统是位于计算机硬件之上管理计算机硬件的一组软件，它可以让计算机自动完成输入运算输出的功能，从而让“人”解放出来。<br>
操作系统的发展阶段主要分为：</p>
<ul>
<li>手工操作系统；</li>
<li>批处理系统；</li>
<li>多道程序系统；</li>
<li>分时系统；</li>
<li>实时系统；</li>
<li>通用操作系统；</li>
</ul>
<p>接下来对它们分别做一下简单的介绍：</p>
<ul>
<li>手工操作系统：“人”需要亲自动手去让计算机计算；</li>
<li>批处理操作系统：计算机的运算开始实现自动化，但是一时间只能运行一个作业（Job）；</li>
<li>多道程序系统：计算机在A作业完成之后可以进行B作业，而不用等待I/O设备的输入，增加了CPU的利用率；</li>
<li>分时系统：多个终端使用一台计算机，增加CPU的利用率；</li>
<li>实习系统：应用于某些需要计算机实时处理数据的场景（导弹系统、机票系统）；</li>
<li>通用操作系统：多道程序、分时以及实时操作系统多种的结合体；<br>
其实贯穿操作系统发展始终的一直“快速”以及“慢速”之间的矛盾，我们都知道，计算机的CPU的计算速度是比较快的，而输入输出设备（Input Output Device）和存储读写速度是比较慢的，所以操作系统发展的<br>
始终是基于提高CPU的利用率而进行的。</li>
</ul>
<h2 id="几款主流的操作系统">几款主流的操作系统</h2>
<h3 id="unix">Unix</h3>
<p>Unix是第一个比较出名的操作系统，而且使用的人群也很广，但是后来因为版权的问题，使得Unix的操作性系统的推广受到了一定的阻碍，目前使用人群不是很多，而且，这款操作系统是需要收费的。<br>
代表产品：HP-UX，IBM-AIX。</p>
<h3 id="linux">Linux</h3>
<p>免费开源的操作系统，而且发展的很迅速，顺带提一下，Linux只是一个内核，不是操作系统，Gnu/Linux才是Linux的真名字，而且Gun是有自己的内核的，不过使用Linux内核成为了主流。<br>
Gun（GNU is Not Unix）是一个号召全世界的开发人员从事软件开源的一个计划。<br>
代表产品：Fedora，CentOS，Ubuntu，OpenSuSE，RHEL（Red Hat Enterprise Linux）。</p>
<h3 id="mac-os">Mac OS</h3>
<p>Unix的变种（分支）。<br>
代表作品：笔者没用过，计划有机会换一台😂。</p>
<h3 id="windows">Windows</h3>
<p>Unix的官司给Windows和Mac OS提供了一个非常好的发展背景，Winodws用户主要集中在个人用户，<br>
代表产品：Win 7，Win10，Windows Server *。</p>
<h2 id="计算机硬件组成">计算机硬件组成</h2>
<p>主板、CPU、存储、输入输出设备、网卡、显卡、声卡 and 等等。<br>
这里主要说一下CPU和存储：</p>
<ul>
<li>CPU（Central Processing Unit，中央处理器），计算机的核心之一，内部分为三个单元，逻辑控制单元，逻辑运算单元，存储（寄存器，L1 cache，L2 cache，L3 cache），性能主要是三个指标：主频数（计算速度的快慢）、核心数（能同时进行计算的多少）、存储大小（读写输入的快慢，记得我们前面说过，CPU运算是比较快的，而从存储里面读写数据是比较慢的）。</li>
<li>存储：读写速度从快到慢，容量从小到大排列为：寄存器，L1 cache，L2 cache，L3 cache，内存，硬盘。</li>
</ul>
<h2 id="常见的服务器分类">常见的服务器分类</h2>
<p>常见的服务器主要分为三种：</p>
<ul>
<li>塔式服务器；</li>
<li>机架式服务器；</li>
<li>刀片式服务器。</li>
</ul>
<p>以及一些小知识：</p>
<ul>
<li>数据中心的电源一般都是两个，两个电源分别接入不同的发电站，确保服务器不会因为缺电停止工作（部分会采用UPS电源，即使断电，短时间内服务器还会继续运行，类似于电池）。<br>
针对某些读/写操作比较大的业务情况（如百度的原理即用户输入想要的内容，百度从自己的数据库中读内容，然后返回给用户；微信红包则是写入的情况），公司的服务器会采用缓存/缓冲技术来应对（从内存中读取数据/从在内存中写入数据）。</li>
</ul>
<p>服务器CPU选择的问题：</p>
<ul>
<li>当应用单线程消耗资源比较多时，选择主频较高的CPU（需要处理某一项业务花费较长时间，业务可能不会有很多）；</li>
<li>如果服务器是用于虚拟化业务，那么选择核心数比较多的CPU（处理单项业务不许需要很长时间，但业务很多）。</li>
</ul>
<h2 id="如何安装操作系统windows">如何安装操作系统（Windows）</h2>
<p>准备工作：一台需要安装操作系统的主机、ISO文件、U盘（大小合适，8G即可）、软碟通软件。<br>
操作步骤：将ISO文件通过软碟通进行考录，制作一个用于装机的U盘，进入计算机的BIOS界面，用此U盘进行操作系统的安装即可（BIOS界面根据自己电脑的不同，进入方式也不同，通常在计算机重启时按F1~12即可进入，Dell游匣是F12，笔者自己电脑）。</p>
<h2 id="单元考核知识点总结">单元考核知识点总结</h2>
<ol>
<li>计算机的发展阶段：机械（计算机）-&gt;电子管-&gt;晶体管-&gt;集成电路；</li>
<li>操作系统工作原理：用户（User）-&gt;APP-&gt;Shell（包括CLI和GUI界面）-&gt;操作系统内核（Kernal）-&gt;硬件（Hardware）；</li>
<li>Windows发展阶段：Windows1，2，3，95，98，ME，XP，Vista，7，8，10；</li>
<li>使用较长时间的电脑出现卡顿的情况，可以将硬盘更换成固态；</li>
<li>计算机的两大组件：硬件、软件；</li>
<li>服务器主要组成：硬盘，内存，远程管理卡，主板，CPU，阵列卡，网卡，电源，风扇...；</li>
<li>云计算的基础知识：网络知识，操作系统知识，存储知识，虚拟化知识；</li>
<li>VMware Workstation（个人认为绝大多数软件和硬件）具有向下兼容和向上不兼容性；</li>
<li>使用VMware Workstation创建动态快照和静态快照时，动态快照比静态快照占用的空间更大，因为动态快照还会备份虚拟机的内存（内存在断电后就没了）；</li>
</ol>
<h2 id="其他">其他</h2>
<ul>
<li>安装CentOS，笔记本上使用Ctrl+Fn+Alt+F1~F6可进入不同的用户界面；</li>
<li>CentOS和RHEL，进入界面推荐选择第三个经典（Classic）界面，比较友善一点；</li>
<li>VMware Workstation链接克隆的本质就是快照（相对的是完整克隆）；</li>
<li>VMware Workstation静态快照和动态快照（自己思考）；</li>
<li>CentOS和RHEL差不多，Ubuntu界面不错，Fedora体验很好（支持IP访问的操作）；</li>
<li>网络+操作系统+存储+虚拟化 -&gt; 云计算；</li>
<li>RHCA方向：DC（数据中心)，Storage（存储），Cloud（云计算）；</li>
<li>虚拟化是一个技术，云计算是一个理念（云计算：利用虚拟化的技术，对需要的用户提供弹性的服务，包括计算的资源、网络的资源、存储的资源，如：百度云）；</li>
</ul>
<h2 id="学习过程记录">学习过程记录</h2>
<p><strong>这个用来记录每天学习的进度，每天进步一点点👍👍。</strong></p>
<ol>
<li>2020.10.07：视频时间201min，完成第一章的练习题；</li>
<li>2020.10.08：视频时间215min，更新博客；</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RHCE（Red Hat Certified Engineer）学习过程记录]]></title>
        <id>https://shley8.github.io/post/rhcered-hat-certified-engineerxue-xi-guo-cheng-ji-lu/</id>
        <link href="https://shley8.github.io/post/rhcered-hat-certified-engineerxue-xi-guo-cheng-ji-lu/">
        </link>
        <updated>2020-10-06T02:54:11.000Z</updated>
        <content type="html"><![CDATA[<p>2020.9.24 星期四报名的RHCE，在工作之余每天计划学习两个小时的课程，达到或者超过网站安排的教学计划， 每个学习周期记录一次，希望能不忘初心，早日考下RHCE证书😊。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://shley8.github.io/post/hello-gridea/</id>
        <link href="https://shley8.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>