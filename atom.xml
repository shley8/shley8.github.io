<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://shley8.github.io</id>
    <title>Shley8&apos;s Blogs</title>
    <updated>2020-11-24T13:40:29.947Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://shley8.github.io"/>
    <link rel="self" href="https://shley8.github.io/atom.xml"/>
    <subtitle>宛若新生</subtitle>
    <logo>https://shley8.github.io/images/avatar.png</logo>
    <icon>https://shley8.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Shley8&apos;s Blogs</rights>
    <entry>
        <title type="html"><![CDATA[第六章：学习周期两周（2020.10.28~2020.11.11）]]></title>
        <id>https://shley8.github.io/post/di-liu-zhang-xue-xi-zhou-qi-liang-zhou-20201028~20201111/</id>
        <link href="https://shley8.github.io/post/di-liu-zhang-xue-xi-zhou-qi-liang-zhou-20201028~20201111/">
        </link>
        <updated>2020-10-27T13:51:26.000Z</updated>
        <content type="html"><![CDATA[<p><strong>主要内容：CCNA的内容（CCNA入门）。</strong></p>
<h2 id="第一章网路基础">第一章：网路基础</h2>
<h3 id="网络的基本功能">网络的基本功能</h3>
<p>网络的基本功能：数据传输；<br>
网络（数据传输）的三个必要条件：请求方（接收方）—— 介质 —— 发送方；</p>
<h3 id="网络中常见的设备">网络中常见的设备</h3>
<ul>
<li>终端设备：PC（Personal Computer）、Printer（打印机）、Server（服务器）、Desktop（笔记本，不能联网）、Laptop（笔记本，可联网）、IP Phone；</li>
<li>Switch（交换机）、Router（路由器）-&gt; 可以统称为R&amp;S设备、Access Point（接入点，AP设备）；</li>
<li>Firewall（防火墙，保证网络的安全）；</li>
<li>网络探讨的是终端到终端的数据传输；</li>
</ul>
<h3 id="如何衡量一个网络的好坏">如何衡量一个网络的好坏？</h3>
<ul>
<li>Topology（拓扑 -&gt; 网络设计成什么样子，网络的好坏和先天设计是有关系的）；</li>
<li>Speed（速度 -&gt; 跟带宽和延迟有关系，带宽越高，延迟高的可能性就越低）；</li>
<li>Cost（开销 -&gt; 花钱的多少，完成这个网络的部署花了多少钱）；</li>
<li>Security（安全）；</li>
<li>Availability（可用性 -&gt; 一年内的可用性：能使用的时间-不能使用的时间/能使用的时间，RHN能保证网络在一年的可用性达到99.999%，一年20w）；</li>
<li>Scalability（可扩展性）；</li>
<li>Reliability（可靠性 -&gt; 可靠性衡量起来很困难，考虑的因素比较多）；</li>
</ul>
<h3 id="网络的拓扑物理拓扑逻辑拓扑">网络的拓扑（物理拓扑&amp;逻辑拓扑）</h3>
<p>物理拓扑：</p>
<ul>
<li>Bus Topology（总线型拓扑，已被淘汰）；</li>
<li>Ring Topology（环形拓扑，特点 -&gt; 传输数据只能沿着一个方向单向传输，基本无人使用 -&gt; 后来出现了双环形拓扑，特定场景使用）；</li>
<li>Star Topology（星形拓扑 -&gt; 依赖中间的设备，中间的设备坏掉了，其他的设备无法通信了 -&gt; 单点故障 -&gt; 很少使用）；</li>
<li>Mesh Topology（网状拓扑 -&gt; 可靠性非常好，但是比较昂贵）；</li>
</ul>
<p>逻辑拓扑：<br>
概念：逻辑拓扑描述的是设备（PC、Router...）之间的数据传输的方向。</p>
<h3 id="一些介质">一些介质：</h3>
<p>Ethernet Link -&gt; 以太网链路 -&gt; 局域网使用；<br>
Serial Link -&gt; 串行链路 -&gt; 广域网使用；<br>
Wireless Link -&gt; 无线链路；<br>
Network -&gt; 位置区域，不用管；<br>
一般交换机跟终端连接的叫下行接口，跟上面路由器连接的是上行接口，下行接口一般都是十兆百兆，上行接口都是千兆（参数：24+2 -&gt; 表示24个下行接口，2个上行接口）；</p>
<h2 id="第二章主机间的通信模型">第二章：主机间的通信模型</h2>
<h3 id="理解主机间的通信模型">理解主机间的通信模型</h3>
<p>Hub：集线器，非常不建议在网络中使用；</p>
<h3 id="osi七层模型">OSI七层模型</h3>
<table>
<thead>
<tr>
<th style="text-align:center">X层</th>
<th style="text-align:center">中文名</th>
<th style="text-align:center">英文名字</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">第七层</td>
<td style="text-align:center">应用层</td>
<td style="text-align:center">Application</td>
<td style="text-align:center">产生数据</td>
</tr>
<tr>
<td style="text-align:center">第六层</td>
<td style="text-align:center">表示层</td>
<td style="text-align:center">Presentation</td>
<td style="text-align:center">翻译官，对应用层来的数据进行压缩解压缩，加密解密</td>
</tr>
<tr>
<td style="text-align:center">第五层</td>
<td style="text-align:center">会话层</td>
<td style="text-align:center">Session</td>
<td style="text-align:center">数据传输之前建立一个会话，传输中维持会话，传输后终止会话</td>
</tr>
<tr>
<td style="text-align:center">前三层：开发需要学习的-&gt;是系统层</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">第四层</td>
<td style="text-align:center">传输层</td>
<td style="text-align:center">Transport</td>
<td style="text-align:center">标明数据的来源是哪个应用程序</td>
</tr>
<tr>
<td style="text-align:center">第三层</td>
<td style="text-align:center">网路层</td>
<td style="text-align:center">Network</td>
<td style="text-align:center">寻址</td>
</tr>
<tr>
<td style="text-align:center">第二层</td>
<td style="text-align:center">数据链路层</td>
<td style="text-align:center">Data Link</td>
<td style="text-align:center">承上启下的作用</td>
</tr>
<tr>
<td style="text-align:center">第一层</td>
<td style="text-align:center">物理层</td>
<td style="text-align:center">Physical</td>
<td style="text-align:center">定义了一些设备的接口以及传输速率</td>
</tr>
<tr>
<td style="text-align:center">后四层：网络层</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<ul>
<li>传输层
<ul>
<li>源端口号两个字节 -&gt; 端口号用来标明上层所使用的应用程序</li>
<li>目的端口号两个字节</li>
<li>SYN和ACK各一个比特</li>
</ul>
</li>
<li>网络层
<ul>
<li>源IP地址四个字节</li>
<li>目的IP地址四个字节</li>
<li>Protocol字段一个字节 -&gt; 标明上层使用的协议
<ul>
<li>1 -&gt; ICMP</li>
<li>6 -&gt; TCP</li>
<li>17 -&gt; UDP</li>
<li>88 -&gt; EIGPRP</li>
<li>89 -&gt; OSPF</li>
</ul>
</li>
</ul>
</li>
<li>数据链路层
<ul>
<li>源MAC地址六个字节</li>
<li>目的MAC地址六个字节</li>
<li>type字段两个字节 -&gt; 表明上层所使用哪些协议
<ul>
<li>0x0800 -&gt; 表示上层是IPv6协议</li>
<li>0x0806 -&gt; 表示上层是ARP协议</li>
<li>0x86dd -&gt; 表示上层是IPv6协议</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="进制转换">进制转换</h3>
<p>1B（Byte，字节）=8b（bit，比特）<br>
1KB=1024B<br>
1MB=1024KB<br>
1GB=1024MB<br>
1TB=1024GB<br>
...</p>
<ul>
<li>为什么宣传说100M的网速，但实际的下载速度却达不到那么高呢？</li>
</ul>
<blockquote>
<p>因为100M是100Mbps（Mb per second/Mb每秒）=12.5MBps（MB per second/MB每秒），加上传输时会有数据损失，因此下载速度并没那么高。</p>
</blockquote>
<ul>
<li>为什么32G的U盘插到电脑上却没32G呢？</li>
</ul>
<blockquote>
<p>因为为了生产方便，企业在生产时都用1000作为进制单位而不会是1024.</p>
</blockquote>
<h2 id="第三章局域网以太网协议数据链路层">第三章：局域网（以太网协议，数据链路层）</h2>
<h3 id="三种网络">三种网络</h3>
<p>Local Area Network（LAN） -&gt; 局域网；<br>
Campus Netwok（CAN）-&gt; 园区网；<br>
Metropolitan Area Network（MAN） -&gt; 城域网；</p>
<h3 id="网关">网关</h3>
<p>概念：网关给局域网内的用户提供了一扇门，通过这扇门，可访问到别的网络；<br>
另一个概念：路由器的每一个接口都代表一个网络；</p>
<h3 id="以太网ethernet-network">以太网（Ethernet Network）</h3>
<p>传统网络存在的问题：传输距离最大只有100m -&gt; Ethernet Hub（集线器）出现解决了这个问题（原理：信号放大） -&gt; 集线器的作用：①信号放大；②从一个接口接收数据，会复制N份，从其他的接口发出去；③半双工，同一时间只能接受/发送数据（也能收发同时进行，但是会出现问题） -&gt; 由于Hub半双工的特点，会使网络造成冲突（双向传输数据时电流会相加减），冲突波及的范围叫冲突域。</p>
<h3 id="csmacd技术改进hub存在的问题">CSMA/CD技术改进Hub存在的问题</h3>
<p>CS：载波监听<br>
MA：多路访问<br>
CD：冲突检测<br>
工作原理，十六个字：先听后发（没人用的话我再发），边发边听（发送的时候看看其他终端有没有强行发送），冲突停发（有冲突我就停止发送），随机等待（然后大家随机等待一段时间后再发送数据）；<br>
仍存在的问题：一个人占用网络的时候，其他的终端都是在等待的，不能发送数据，从而造成网络拥堵（但是时间仍然是很短暂的，人是感觉不到的）</p>
<h3 id="bridge网桥和switch交换机">Bridge（网桥）和Switch（交换机）</h3>
<p>Bridge：纯软件的方式实现的，随着终端设备的增多，Bridge传输数据的速度会越来越慢；<br>
Switch：硬件实现数据转发；</p>
<h3 id="以太网交换机的优点">以太网交换机的优点</h3>
<h3 id="交换机接口的命名">交换机接口的命名</h3>
<p>接口类型+板卡号+模块号+接口号 -&gt; 例如：E 3/0/1；</p>
<h3 id="frame数据帧详解">Frame（数据帧详解）</h3>
<table>
<thead>
<tr>
<th style="text-align:center">英文</th>
<th style="text-align:center">中文</th>
<th style="text-align:center">字节大小</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Rreamble</td>
<td style="text-align:center">前导码</td>
<td style="text-align:center">8</td>
<td style="text-align:center">检测是否是帧数据，检测传输的数据类型</td>
</tr>
<tr>
<td style="text-align:center">Destination Address</td>
<td style="text-align:center">目的地址</td>
<td style="text-align:center">6</td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td style="text-align:center">Source Address</td>
<td style="text-align:center">源地址</td>
<td style="text-align:center">6</td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td style="text-align:center">Type</td>
<td style="text-align:center">Type字段</td>
<td style="text-align:center">2</td>
<td style="text-align:center">表明上一层（网络底层）使用的协议</td>
</tr>
<tr>
<td style="text-align:center">Data</td>
<td style="text-align:center">网络层的数据</td>
<td style="text-align:center">46~1500</td>
<td style="text-align:center">网络层的数据包最小46字节最大1500字节</td>
</tr>
<tr>
<td style="text-align:center">FCS：Frame Checksum</td>
<td style="text-align:center">校验和</td>
<td style="text-align:center">4</td>
<td style="text-align:center">检测数据帧是不是正确，不正确的话就丢弃</td>
</tr>
</tbody>
</table>
<h3 id="mac地址详解">MAC地址详解</h3>
<ul>
<li>MAC地址是采用16进制表示的，6个字节，4个比特表示一个字符，2个字符一个字节；</li>
<li>数据链路层数据传输的方式：
<ul>
<li>单播：一对一；</li>
<li>组播：固定的人能收到；</li>
<li>广播：一对所有人；</li>
</ul>
</li>
<li>在以太网的数据帧中，目的MAC地址如果第八个比特为0，那么此数据是单播的；如果第八个比特是1，且全部比特都为1，那么此数据是广播的，如果不全部为1，那么此数据是组播的。</li>
</ul>
<h3 id="交换机数据传输的三种方式">交换机数据传输的三种方式</h3>
<ul>
<li>交换机智能的原因是它能学习以太网数据帧中的源MAC地址，具体流程：在交换机收到一个需要转发的数据帧以后，先在自己的MAC表中查找是否有对应的源MAC地址，如果没有，那么记录本次发送数据帧的终端的源MAC地址，随后进行泛洪；如果MAC表中有MAC地址，那么进行转发。</li>
<li>交换机传输数据的三方式：
<ul>
<li>转发
<ul>
<li>在收到一个数据帧以后，在自己已学习到的MAC表中查找到对应的目标MAC地址，随后进行转发；</li>
</ul>
</li>
<li>泛洪
<ul>
<li>在收到一个数据帧以后，在MAC表中未查找到需要转发的MAC地址，就把此数据帧做泛洪（广播）；</li>
<li>在收到一个数据帧以后，发现此数据帧是广播的数据帧，就泛洪（广播）；</li>
</ul>
</li>
<li>丢弃
<ul>
<li>收到错误的数据帧，就丢弃；</li>
<li>如果从交换机的一个接口收到一个数据帧，又马上得把此数据帧从相同的接口发出去，就丢弃（此情况的产生是因为下面接了一个Hub，Hub在收到数据帧之后会进行泛洪操作）；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="广播域和冲突域">广播域和冲突域</h3>
<ul>
<li>广播域到路由器（Router，三层设备）停止；</li>
<li>冲突域存在于路由器之间，到路由器停止；</li>
</ul>
<h2 id="传输介质">传输介质</h2>
<h3 id="铜同轴电缆">（铜）同轴电缆</h3>
<ul>
<li>Coaxial：同轴电缆；</li>
<li>组成：铜芯（传输数据）、塑料（保护铜芯）、绝缘层（防止信号干扰）、保护套（保护绝缘层）；</li>
<li>不再使用，同轴电缆使用铜比较多，因此成本比较高，且传输距离不够远；</li>
</ul>
<h3 id="双绞线网线">双绞线（网线）</h3>
<ul>
<li>特点：
<ul>
<li>物理传输时最流行的传输介质；</li>
<li>传输电信号；</li>
</ul>
</li>
<li>双绞线双绞是因为防止电磁干扰；</li>
<li>组成：八根线；</li>
<li>分类
<ul>
<li>屏蔽双绞线（有金属绝缘层）-&gt; 通常屏蔽双绞线都能用光纤代替，因此屏蔽双绞线使用的非常少，我们所见到的都是非屏蔽双绞线，简称STP；</li>
<li>非屏蔽双绞线-&gt; 简称UTP；</li>
</ul>
</li>
<li>EIA/TIA组织定义的双绞线的线序标准
<ul>
<li>橙白、橙、绿白、绿、蓝白、蓝、棕白、棕 -&gt;标准线序</li>
<li>橙白，橙，绿白，蓝，蓝白，绿，棕白，棕 -&gt;T568B线序；</li>
<li>绿白，绿，橙白，蓝，蓝白，橙，棕白，棕 -&gt;T568A线序；</li>
</ul>
</li>
<li>如果两端的线序一样，那么就叫直通线，不一样，就叫交叉线；现在除思科以外（思科以前认为，一个专业的网络工程师，不可能分不清楚直通线和交叉线，但是后来也换成自适应接口了），其他厂商的设备接口都是自适应。</li>
</ul>
<h3 id="光纤">光纤</h3>
<ul>
<li>传输光信号；</li>
<li>组成：光芯（主要成分二氧化硅，也是镜子的原料）、一层保护膜、二层保护膜；</li>
</ul>
<h2 id="ip协议网络层的代表">IP协议（网络层的代表）</h2>
<h3 id="ip协议">IP协议</h3>
<ul>
<li>
<p>特点</p>
<ul>
<li>工作在网络层</li>
<li>无连接的协议
<ul>
<li>不可靠（尽最大努力交付数据）</li>
<li>没重传数据机制</li>
</ul>
</li>
<li>IPv4和IPv6</li>
<li>分层编址
<ul>
<li>IP地址由两部分组成：网络位（Network）和主机位（Host）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>五类地址（前八位）</p>
<ul>
<li>A：0xxxxxxx</li>
<li>B：10xxxxxx</li>
<li>C：110xxxxx</li>
<li>D：1110xxxx</li>
<li>E：11110xxx</li>
<li>A、B、C三类地址是主机地址
<ul>
<li>主机位全为0，代表这是一个网络地址</li>
<li>主机位全为1，代表这是一个广播地址
<ul>
<li>255.255.255.255：本地广播地址 -&gt;很有可能这台电脑不知道自己所处的位置，发出请求后DHCP服务器可以给它配置IP，这是一条用来请求IP地址的请求；</li>
<li>10.255.255.255：表明这是一个A段网络的该网络的广播地址；</li>
</ul>
</li>
</ul>
</li>
<li>127网段被保留作为环回地址，可使用ping 127.0.0.1检测本地网卡有无损坏；</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">地址类型</th>
<th style="text-align:center">私有地址范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">10.0.0.0 to 10.255.255.255</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">172.16.0.0 to 172.31.255.255</td>
</tr>
<tr>
<td style="text-align:center">C</td>
<td style="text-align:center">192.168.0.0 to 192.168.255.255</td>
</tr>
</tbody>
</table>
<h3 id="ip数据包头字段解析">IP数据包头字段解析</h3>
<ul>
<li>20个字节的固定长度
<ul>
<li>IP头字段通常都是20个字节（Byte，位）；</li>
<li>第一组<br>
* Ver.（版本）：4bit，0100代表IPv4，0101代表IPv6；<br>
* IHL（Ip Header Length，IP头长度）：4bit，通常情况下（99%）值为0101（表示ip头长度是20个字节 -&gt; 0101换算成十进制是5，此字段和IP头长度的关系是 *4的关系，即ip头字段长度=IHL*4）；<br>
* Service Type（服务类型）：8bit；<br>
* Total Length（总长度）：16bit，IP数据包的总长度（IP头字段+IP数据包），理论上最大为65535（2^16）Byte，但是实际上最多为1500Byte（MTU，也能调，但是一般不调）；</li>
<li>第二组，这三个字段用来使数据包分片<br>
* Identification（标识）：16bit，用来表明数据片属于哪个数据包；<br>
* Flag（标志）：3bit，使用DF（Deny Fragment，拒绝分片）/MF（More Fragment，更多的分片）字段来表明最后一个数据片是不是已经组合了；<br>
* Fragment Offset（片偏移）：13bit，用来让属于相同数据包的数据片按照顺序组合；</li>
<li>第三组
<ul>
<li>Time to Live（存活时间）：8bit，每经过一个三层设备，该数值减一，当该数值为0时，三层设备会把该数据包丢弃，用来防止数据包成环；</li>
<li>Protocol（协议）：8bit，表示上层使用的协议；</li>
<li>Header Checksum（首部检验和）：16bit，检验包头是好是坏；</li>
</ul>
</li>
<li>第四组
<ul>
<li>Source Address（源地址）：32bit</li>
</ul>
</li>
<li>第五组
<ul>
<li>Destination Address（目的地址）：32bit</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>可选长度</p>
<ul>
<li>第六组
<ul>
<li>Options（可选项）：</li>
<li>Padding（填充）：当头部不满足4的整数倍字节的时候，需要用该字段填充；</li>
</ul>
</li>
</ul>
<h3 id="dns">DNS</h3>
<ul>
<li>自己配置自己的DNS -&gt; 默认的DNS服务器是自己使用网络的网络运营商提供的；</li>
</ul>
</li>
</ul>
<h3 id="划分子网和vlsm技术">划分子网和VLSM技术</h3>
<ul>
<li>子网掩码的定义：连续的1和0组成的4位的0，1数字，跟IP地址一起使用，使IP地址的利用率更高；</li>
<li>VLSM技术：增加子网掩码长度，使得网络划分的更为细致，节约网络地址；</li>
</ul>
<h2 id="传输层协议">传输层协议</h2>
<h3 id="传输层的功能">传输层的功能</h3>
<ul>
<li>会话多路复用（为什么一个IP地址可以做很多事情？）；
<ul>
<li>五元组：源IP地址、目的IP地址、源端口号、目的端口号、协议号（Protocol）；</li>
</ul>
</li>
<li>表明不同的应用程序；</li>
<li>分段（第一次对传输的数据进行划分，不彻底的话会在网络层进行分片）；</li>
<li>流量控制；</li>
<li>有连接；
<ul>
<li>可靠传输（可靠性的基础：数据的传输是有序的、数据的传输是有确认机制的、有数据重传机制、可靠性的前提是建立一个连接  ||  对比无连接协议的特性，IP协议）；</li>
</ul>
</li>
</ul>
<h3 id="tcp">TCP</h3>
<h3 id="udp">UDP</h3>
<h3 id="icmp">ICMP</h3>
<ul>
<li>ping：实际上使用的两个协议，一收一发（request、reply）；</li>
<li>traceroute（路由追踪）：
<ul>
<li>较大端口号（端口不可达，到最终的路由的时候）；</li>
<li>TTL值递增（返回值TTL超时，可根据此项得知下一个路由器的IP地址）；</li>
<li>可用来进行路由器是否正常的检测；</li>
</ul>
</li>
</ul>
<h2 id="路由">路由</h2>
<h3 id="路由的基础知识">路由的基础知识</h3>
<ul>
<li>路由器路由转发依赖的是路由表，路由表内记录的是目的IP；</li>
<li>路由器的两个最主要的功能：
<ul>
<li>路由转发（传输数据）；</li>
<li>选择转发的线路（RIP选择路由最少的路径、OSPF选择带宽最大的路径）；</li>
</ul>
</li>
<li>EIGRP：思科私有协议，只在Cicso设备中有；</li>
</ul>
<h3 id="路由选择的方法">路由选择的方法</h3>
<p>相同网络之间的路由选择</p>
<ul>
<li>AD（管理距离：不同的路由协议，有不同的AD值）和Metric（不同因素的Metric值不一样）是路由转发时候考虑的值，如果有两条网络目的相同的路由，优先选择AD值较小的，如果AD值一样，那么选择Metric值小的。</li>
</ul>
<p>不同网络之间的路由选择</p>
<ul>
<li>选择子网掩码最长的（确保数据传输的准确性）。</li>
</ul>
<h2 id="arpaddress-revolution-protocol地址解析协议">ARP（Address Revolution Protocol，地址解析协议）</h2>
<p>通信时请求方通过ARP协议来确定对方的MAC地址。</p>
<h3 id="四类arp">四类ARP</h3>
<ul>
<li>标准ARP：通信时请求方通过ARP协议来确定对方的MAC地址；</li>
<li>无故ARP（免费ARP）：检测IP地址是否冲突（每当网络内有一个新的主机被分配IP地址时，自己给自己发送ARP协议，若是有主机回应的话，则存在主机IP地址冲突）；</li>
<li>代理ARP（Cicso设备默认开启反向ARP、华为的设备默认关闭此功能）：路由会帮助PC实现跨网络的通信（善意的欺骗，路由会欺骗未配网关的PC）；</li>
<li>反向ARP：MAC地址解析成IP地址，与标准ARP相反；
<ul>
<li>应用场景：
<ul>
<li>无盘操作系统安装；</li>
<li>帧中继；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="包交付过程回顾">包交付过程（回顾）</h3>
<ul>
<li>数据在不同网络之间的传递过程；</li>
<li>访问www.baidu.com的过程；</li>
</ul>
<h2 id="园区网campus企业级别的网络中等网络局域网-园区网-城区网">园区网（Campus，企业级别的网络，中等网络，局域网、园区网、城区网）</h2>
<h3 id="园区网的三层架构">园区网的三层架构</h3>
<ul>
<li>企业级的网络架构：核心层（Core，转发流量，尽量不要在核心层配置很多的策略）-&gt;  汇聚层（Distribution，汇聚终端的流量）-&gt; 接入层（Access，终端）；</li>
<li>一般防火墙放在路由器之后，路由器的性能比较好，能承受Internet上面的攻击；</li>
</ul>
<h3 id="解决广播域过大的问题vlanvirtual-local-area-network">解决广播域过大的问题（VLAN，Virtual Local Area Network）</h3>
<ul>
<li>VLAN的作用：分割广播域；</li>
<li>VLAN的号：0-4095个，一般不会超过200个（1-1023代表基础VLAN，Cisco设备都支持；1024以上是高级VLAN，高级设备才支持）；</li>
</ul>
<h3 id="trunk链路">Trunk链路</h3>
<ul>
<li>简介：Access链路一条线只能走一个VLAN，Trunk链路一条线可以走很多VLAN；</li>
<li>实现手段：802.1Q协议，在数组帧的源MAC地址和Type字段之间加入了4个字节（Byte）的Tag字段（里面含有VLAN号，12个bit，范围0-4095，跟VLAN号范围一致）；</li>
</ul>
<h3 id="本征vlannative-vlan只能配置在trunk接口上不用封装tag字段">本征VLAN（native vlan，只能配置在Trunk接口上，不用封装Tag字段）</h3>
<ul>
<li>DTP协议：Cisco协议，当一端接口未Trunk时，另一端接口自动协商成为Trunk；</li>
<li>Trunk链路允许一个VLAN不用封装（因为当添加Tag字段后，FCS校验值也得重新封装，当传输数据过大时，会造成链路负担）；</li>
<li>不建议使用，因为容易受到“VLAN跳跃式攻击”；</li>
</ul>
<h3 id="vtpvlan-trunk-protocolcisco私有协议">VTP（Vlan Trunk Protocol，Cisco私有协议）</h3>
<ul>
<li>功能：自动的创建和删除Vlan；</li>
<li>三种模式：
<ul>
<li>Server；</li>
<li>Client；</li>
<li>透明模式；</li>
</ul>
</li>
<li>三种模式之间的关系介绍：
<ul>
<li>Client模式能学习到Server端创建的Vlan，也能学习到Server端删除的Vlan；</li>
<li>Client端不能自己创建Vlan；</li>
<li>透明模式不能学习也不能创建自己的Vlan</li>
</ul>
</li>
<li>配置VTP的步骤：
<ul>
<li>配置VTP的模式；</li>
<li>配置一个VTP的域；</li>
<li>配置VTP的版本；</li>
</ul>
</li>
</ul>
<h3 id="vlan间的路由">VLAN间的路由</h3>
<p>*二层/三层转发的区别：<br>
*  二层转发 -&gt; 根据数据帧中的目的MAC地址进行转发；<br>
*  三层转发 -&gt; 根据目的IP地址进行转发；</p>
<h3 id="多臂路由单臂路由很少用了">多臂路由/单臂路由（很少用了）；</h3>
<ul>
<li>单臂路由不同VLAN的数据传输的过程：PC1（VLAN10）-&gt;交换机（因为不同的VLAN，不能直接传输给VLAN20的PC2）-&gt; 路由器（俩子接口：一个VLAN10的子接口，一个VLAN20的子接口）-&gt; 交换机-&gt; PC2（VLAN20）</li>
</ul>
<h3 id="sviswith-virtual-interface交换机虚拟接口其实就是三层交换机">SVI（Swith Virtual Interface，交换机虚拟接口，其实就是三层交换机）</h3>
<ul>
<li>概念：能配置一个以上的SVI接口的交换机就叫三层交换机（二层交换机只能配一个）；</li>
<li>交换机接口不能配IP地址，二层设备的接口是不能配IP地址的；路由器是三层设备，三层设备的接口可以配IP地址；</li>
<li>只有当三层交换机的其他接口能传递VLAN的数据的时候，SVI接口才会up（自动up）；</li>
<li>SVI接口的作用：可以把多个物理接口逻辑成一个接口（相当于网关），接入同一VLAN的不同IP的PC，可通过访问交换机上的SVI接口互相进行通信/数据传输，从而省略了路由器；这也是三层交换机替换二层交换机+路由器的主要原因；</li>
</ul>
<h2 id="思科iso操作">思科ISO操作</h2>
<h3 id="软件需要">软件需要</h3>
<p>EVE-Student（虚拟机文件）、EVE工具、VMware Workstation、Broser、secureCRT或者Putty（SSH工具）；</p>
<h3 id="三种模式">三种模式</h3>
<ul>
<li>用户模式：&gt;</li>
<li>特权模式：#，从用户模式进入/退出，输入enable /disable</li>
<li>全局模式：从特权模式进入/退出，输入configure terminal/exit</li>
</ul>
<h3 id="ip配置">IP配置</h3>
<ul>
<li>enable进入特权模式，configure terminal进入全局模式；
<ul>
<li>全局模式可以使用特权模式的命令，只需要在前面加上do即可；</li>
<li>hostname + 设备名：修改设备的名称；（命令不区分大小写）</li>
<li>配置设备IP
<ul>
<li>进入路由器接口：interface ethernet 0/0；</li>
<li>配置ip地址：ip address 192.168.1.10 255.255.255.0；</li>
</ul>
</li>
<li>开启设备（默认是双down）：no shutdown</li>
</ul>
</li>
<li>exit退出全局模式进入特权模式；
<ul>
<li>查看单个IP配置信息：show interfaces ethernet 0/0；（默认设置为双down）</li>
<li>查看所有配置的ip信息：show ip interface brief；</li>
</ul>
</li>
</ul>
<h3 id="查配置文件">查配置文件</h3>
<ul>
<li>查看当前系统内存中的配置文件；
<ul>
<li>enable ；</li>
<li>show running-configure；</li>
</ul>
</li>
<li>让当前的系统的配置文件变成系统启动会自动加载的配置文件
<ul>
<li>因为命令会存在内存当中，当设备重启之后，内存中数据会消失，命令以及配置文件都会消失；</li>
<li>enable；</li>
<li>copy running-configure start-configure（write）；</li>
</ul>
</li>
<li>清空下次开机的默认文件：erase start-configure（erase nvram、write erase）；</li>
</ul>
<h2 id="time">Time</h2>
<p>2020.10.28：视频时间62min，博客写笔记；<br>
2020.10.29：视频时间159min，博客写笔记；<br>
2020.10.30：视频时间35min，博客写笔记；<br>
2020.10.31：视频时间198min，博客写笔记；<br>
2020.11.1：视频时间130min；<br>
2020.11.2：视频时间72min，博客写笔记（停止，期间学习Java）；<br>
2020.11.20：视频时间72min，博客写笔记（开始学习，冲冲冲！）；<br>
2020.11.21：视频时间107min，博客写笔记；<br>
2020.11.22：视频时间191min，博客写笔记；</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第五章：学习周期五天（2020.10.26~2020.10.27，已完成✅）]]></title>
        <id>https://shley8.github.io/post/di-wu-zhang-xue-xi-zhou-qi-wu-tian-20201026~20201030/</id>
        <link href="https://shley8.github.io/post/di-wu-zhang-xue-xi-zhou-qi-wu-tian-20201026~20201030/">
        </link>
        <updated>2020-10-27T07:29:41.000Z</updated>
        <content type="html"><![CDATA[<p><strong>主要内容：进程管理和服务（服务一定是进程，进程不一定是服务）管理。</strong></p>
<h2 id="查看进程常用的指令以及参数">查看进程常用的指令以及参数</h2>
<h3 id="ps">ps</h3>
<ul>
<li>
<p>最常用的指令：ps aux | grep + 进程名（如：cat）；</p>
<ul>
<li>a 表示所有的前台进程；</li>
<li>x 表示所有的后台进程；</li>
<li>u 表示进程是由哪个用户产生的；</li>
</ul>
</li>
<li>
<p>分析输出结果</p>
</li>
</ul>
<blockquote>
<p>USER：该进程是由哪个用户产生的；<br>
PID：进程ID（Process ID）；<br>
%CPU：占用CPU的百分比；<br>
%MEM：占用物理内存的百分比；<br>
VSZ：占虚拟内存的大小；<br>
RSS：站实际物理内存的大小；<br>
TTT/PTS：TTY1是图形终端，TTY2<sub>6是字符界面终端，PTS0</sub>255表示虚拟终端；<br>
STAT：进程状态</p>
<blockquote>
<p>R：运行<br>
S：睡眠<br>
T：停止<br>
+：位于后台<br>
START：该进程启动的时间；<br>
TIME：该进程占用CPU的时间，注意不是系统时间；<br>
COMMAND：产生此进程的命令；</p>
</blockquote>
</blockquote>
<ul>
<li>ps -le 或ps -ef（不常用）
<ul>
<li>l 表示详细信息；</li>
<li>e 表示显示所有进程；</li>
</ul>
</li>
</ul>
<h3 id="top">top</h3>
<ul>
<li>top主要是查看进程占系统资源（CPU、内存）的顺序，默认3s更新一次（-d参数）；</li>
<li>top状态的一些指令：
<ul>
<li>？或h：显示交互模式的帮助；</li>
<li>P：按CPU使用率排序（默认）；</li>
<li>M：内存排序；</li>
<li>N：PID的顺序排列；</li>
<li>q：退出；</li>
</ul>
</li>
</ul>
<h3 id="pstree">pstree</h3>
<ul>
<li>pstree可以查看进程树，-d参数可以查看PID；</li>
</ul>
<h3 id="kill">kill</h3>
<ul>
<li>kill命令的本质是向进程发送信号；</li>
<li>-l参数，查看所有进程信号；</li>
<li>常见的进程号：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">信号代号</th>
<th style="text-align:center">信号名称</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">SIGHUP</td>
<td style="text-align:center">该信号让进程⽴即关闭，然后重新读取配置⽂件之后重启</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">SIGINT</td>
<td style="text-align:center">程序终⽌信号，⽤户终⽌前台进程。相当去输出ctrl+c快捷键</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">SIGKILL</td>
<td style="text-align:center">⽤来⽴即结束程序的运⾏，本信号不能被阻塞、忽略。⼀般⽤于强制终⽌进程</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">SIGTERM</td>
<td style="text-align:center">正在结束进程的信号，kill命令的默认信号。有时如果进程已经发⽣问题，这个信号是⽆法正常终⽌进程的，我们这时才会尝试SIGKILL信号，也就是信号9</td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td style="text-align:center">SIGCONT</td>
<td style="text-align:center">信号可以让暂停的进程恢复执⾏，本信号不能被阻断</td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td style="text-align:center">SIGSTOP</td>
<td style="text-align:center">该信号可以暂停前台进程，相当于输⼊crtl+z快捷键。本信号不能被阻断</td>
</tr>
</tbody>
</table>
<ul>
<li>用法：kill + 信号（比如：9）+ 进程IP（PID）</li>
</ul>
<h3 id="killall">killall</h3>
<ul>
<li>killall杀死一批同名的进程（例如：killall cat -&gt;杀死所有的cat进程）；</li>
</ul>
<h3 id="wwho这是两个命令具体区别以后查看暂时分不清楚">w/who（这是两个命令，具体区别以后查看，暂时分不清楚）</h3>
<ul>
<li>查看当前登录系统的用户信息；</li>
</ul>
<h3 id="pkill不常用">pkill（不常用）</h3>
<ul>
<li>一般用于把用户剔除（pkill -t TTY）；</li>
</ul>
<h3 id="使用nice和renice调整进程的优先级">使用nice和renice调整进程的优先级</h3>
<ul>
<li>nice -n -20 cat /dev/zero /dev/null &amp; -&gt; 调整一个后台进程的nice值为-20；</li>
<li>renice -n -20 PID -&gt; 冲新调整一个进程IP为PID的进程使得它的nice值为-20；</li>
</ul>
<blockquote>
<p>nice值和进程的优先级值之间的值差20，优先级值最低为0（nice值最低为-20）；</p>
</blockquote>
<h3 id="前台进程和后台进程">前台进程和后台进程</h3>
<ul>
<li>当输入一个命令的时候，在结尾机上&amp;就可让它变成后台进程（注意，不要特意把前台进程变成后台服务，有的命令是没有意义的）；</li>
</ul>
<h2 id="sysytemctl管理服务">sysytemctl管理服务</h2>
<p>systemd是PID为1的服务，RHEL6版本以前，是INIT，因为INIT是串行运行的，所以系统启动比较慢。</p>
<h3 id="service">service</h3>
<ul>
<li>systemctl list-units -&gt; 查看systemd能管理的unit -&gt; 服务只是一种unit；</li>
<li>systemctl list-unit-files -&gt; 查看unit的状态（enabled、disabled等）；</li>
<li>systemctl status NetworkManager.service（省略.service也行）-&gt; 查看服务的状态；</li>
<li>systemctl stop/start/restart NetworkManager.service -&gt; 停止/开始/重启服务；</li>
<li>systemctl enable/disble NetworkManager -&gt; 允许/禁止开机自启动；</li>
<li>systemctl is-enabled/activate NetworkManager -&gt; 服务是否开机自启动/正在运行（脚本中用的多）；</li>
</ul>
<h3 id="target">target</h3>
<p>target是service的box。</p>
<ul>
<li>systemctl isolate multi-user.target -&gt; 临时切换到字符界面；</li>
<li>systemctl isolate graphical.target -&gt; 临时切换到图形界面；</li>
<li>systemctl get-default -&gt; 下次启动的target；</li>
<li>systemctl set-default graphical.taeget -&gt; 下次开机启动为graphical.target；</li>
</ul>
<h2 id="拓展">拓展</h2>
<ul>
<li>查看cpu信息：
<ul>
<li>lscpu：查看cpu信息；</li>
<li>cat /proc/cpuinfo：查看单个cpu的情况；</li>
</ul>
</li>
<li>查看内存信息：
<ul>
<li>free： 查看内存（-h参数，人性化显示）；</li>
<li>内存页存放的位置：/sys/devices/system/memory；</li>
</ul>
</li>
<li>fdisk -l：查看磁盘；</li>
<li>ethtool：查看网卡 -&gt; 一般是想确定网卡的带宽
<ul>
<li>ethtool + 网卡名字：查看单个网卡信息；</li>
</ul>
</li>
<li>iftop：查看网卡的动态（epel的源）；</li>
<li>iotop：查看磁盘的IO（baseos）；</li>
<li>htop：用来取代top的（epel的源）；</li>
<li>在生产环境中，服务都会有自己对应的service log，其他非服务组件都有syslog；
<ul>
<li>日志文件基本都放在/var/log下（service log？表示有疑问，自己是这么想的）；</li>
<li>非服务组件的日志基本都放在/var/log/messages下（syslog？）；</li>
<li>发现错误的时候，才会去看日志（日志主要的作用：故障排查-&gt;Troubleshooting-&gt;TS）；</li>
</ul>
</li>
</ul>
<h2 id="time">Time</h2>
<ul>
<li>2020.10.26：视频时间122min；</li>
<li>2020.10.27：视频时间209min，博客记录，完成第五章测试；</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第四章：学习周期六天（2020.10.22~2020.10.24，已完成✅）]]></title>
        <id>https://shley8.github.io/post/di-si-zhang/</id>
        <link href="https://shley8.github.io/post/di-si-zhang/">
        </link>
        <updated>2020-10-22T12:02:16.000Z</updated>
        <content type="html"><![CDATA[<p><strong>主要内容：文件/目录的权限九列，修改文件/目录的权限，三类特殊权限（set uid、gid、sticky），文件的ACL设置（setfacl、getfacl），权限委派（/etc/sudoers，/etc/sudoers.d）。</strong></p>
<h2 id="权限">权限</h2>
<h3 id="目录权限">目录权限</h3>
<ul>
<li>r权限表示可以查看目录内文件的属性（ls命令）；</li>
<li>w权限表示可以在目录内创建或者删除文件；</li>
<li>x权限表示可以进入该目录</li>
</ul>
<blockquote>
<p>对文件来说，只有三类权限有意义：</p>
<blockquote>
<p>---：表示目录不能访问；<br>
r-x：表示该目录有读权限；<br>
rwx：表示该目录有读、写的权限；<br>
其他权限都是畸形权限（以进入网吧为例：r为看，w为玩，x为进入）；</p>
</blockquote>
</blockquote>
<ul>
<li>父目录的权限会影响子目录的权限，例如：父目录无权限，那么子目录即使有权限也无法执行对应的操作。</li>
</ul>
<h3 id="普通文本权限包括二进制文件">普通文本权限（包括二进制文件）</h3>
<ul>
<li>r权限表示文本内容可被查看；</li>
<li>w权限表示文本内容可以增加、减少、修改；</li>
<li>x权限表示文本可以当作脚本一样执行；</li>
</ul>
<h2 id="修改权限">修改权限</h2>
<ul>
<li>
<p>chown + 用户名 +文件名 -&gt; 修改文件所有者；</p>
</li>
<li>
<p>chown  用户名: 组名 + 文件名 -&gt; 修改文件所有者+所在组；</p>
</li>
<li>
<p>chgrp + 组名 +文件名 -&gt; 修改文件所有组；</p>
</li>
<li>
<p>chmod + u/g/o + +/-/= +r/w/x/ + 文件名 -&gt; 给u（user，所有者）、g（group，所在组）、o（other，其他用户）增加、减少或者等于r/w/x权限；</p>
</li>
<li>
<p>对于目录文件的解释：所有者对目录有写权限（w），可以删除目录里的文件，不论这个文件的所有者是谁（目录的权限和目录里文件的权限是两码事）；</p>
</li>
<li>
<p>对于文普通文件w权限的解释：一个文件，所有者和root可以用强（比如无写权限可以使用:wq!强制保存），其他的用户都得按照规则来；</p>
</li>
<li>
<p>对于普通文件x权限的解释：当一个普通文件有x权限时，系统默认为此文件为脚本文件，文件里的内容全部按照命令来执行（运行方法：绝对路径/相对路径 -&gt; ./文件名 -&gt; 推荐使用绝对路径来执行）；</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">权限</th>
<th style="text-align:center">对应数字</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">--x</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">-w-</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">-wx</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">r--</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">r-x</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">rw-</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">rwx</td>
<td style="text-align:center">7</td>
</tr>
</tbody>
</table>
<ul>
<li>chmod + 数字*3+ 文件名 -&gt; 设置权限；</li>
</ul>
<h2 id="三类特殊权限">三类特殊权限</h2>
<h3 id="set-uid">Set UID</h3>
<ul>
<li>当一个可执行文件的所有者权限的执行权限被加上s时，任何用户只要执行这个文件，就会获得文件的所有者权限；</li>
<li>/etc/shadow -&gt; 用户可以使用passwd自己修改密码，随后获得root权限，修改/etc/shadow下的存放自己密码的那列，当s权限被撤销时，任何用户不得修改自己的密码；</li>
<li>使用方法：chmod u+/-s 文件名；</li>
</ul>
<h3 id="set-gid">Set GID</h3>
<ul>
<li>当一个目录的所属组权限被加上s权限时，任何用户在此目录创建的文件，所属组都是这个目录文件的所属组；</li>
<li>使用方法：chmod g+/-s 目录名；</li>
</ul>
<h3 id="sticky粘置位">Sticky（粘置位）</h3>
<ul>
<li>当一个目录文件的其他人权限被加上t时，表明限制了其他用户在此目录的写权限 -&gt; 任何用户都可在此目录创建文件，但是删除文件只能自己删除自己的，不能删除他人创建的文件；</li>
<li>任何用户只能在/tmp目录下创建文件，而不能删除其他用户创建的文件；</li>
<li>chmod o+/-t 目录名；</li>
</ul>
<blockquote>
<p>当三类特殊的权限是小写时，表明该文件/目录的x权限还在，当是大写时，表明该文件/目录的x权限被取消了；</p>
</blockquote>
<h2 id="umask">umask</h2>
<ul>
<li>umask设置root/普通用户创建文件的默认减去权限（root为0022，普通用户为0002）；</li>
<li>目录权限默认为777，普通文件默认为666（减去x权限，因为普通文件可执行的话会有危险 -&gt; rm /rf）；</li>
<li>创建一个目录的权限：777（rwxrwxrwx）-022（----w--w-）=755（rwxr-xr-x），注意：是按照权限计算而不是按照数字计算；</li>
</ul>
<blockquote>
<p>如何使用两个命令让三个不同用户（user1、user2和user3）满足不同的权限（rwxrw-r--）？</p>
<blockquote>
<p>chmod user1:user2 file；-&gt; 修改文件的所有者和所属组<br>
chmod u=rwx,g=rw,o=r file；-&gt; 修改文件的权限；</p>
</blockquote>
</blockquote>
<h2 id="文件目录的acl权限">文件/目录的ACL权限</h2>
<h3 id="文件的acl权限">文件的ACL权限</h3>
<ul>
<li>acl表由上到下匹配的，匹配到规则之后就停止；</li>
<li>如果普通文件的权限九列后面有加号（“+”），代表此文件的权限（靠ls命令显示出来的）不可靠，需要查看该文件的acl列表来进一步判断该文件的权限；</li>
<li>查看文件（文件名为file）的acl权限：getfacl（get file acl） file；</li>
<li>文件的acl设置：
<ul>
<li>setfacl（set file acl） -m u:shley:--- file；-&gt; 用户shley对file文件无权限；</li>
<li>setfacl -m g:shley:rw- file；-&gt; 用户组shley对file文件权限为rw-；</li>
<li>setfacl -x u:shley file； -&gt; 删除对用户shley的acl限制；</li>
<li>setfacl -x g:shley file；-&gt; 删除对用户组shley的acl限制</li>
<li>setfacl -b file； -&gt; 使得该文件的权限九列后面的“+”消失，清除文件的acl设置记录；</li>
</ul>
</li>
</ul>
<h3 id="目录的acl权限目录下创建文件">目录的ACL权限（目录下创建文件）</h3>
<ul>
<li>目录ACL权限的意义在于：限制在该目录下所创建文件的文件权限；</li>
</ul>
<blockquote>
<p>需求：在test目录下创建文件，要求user有rwx，group有rw，other有r，shley无任何权限</p>
<blockquote>
<p>setfacl -m d:user::rwx test<br>
setfacl -m d:group::rw test<br>
setfacl -m d:other::r test<br>
setfacl -m d:user:shley:--- test</p>
</blockquote>
</blockquote>
<ul>
<li>设置目录的acl之后，使用getfacl可看到default的值，在该目录下创建的文件默认都会继承该权限限制；</li>
<li>赋予的权限需要看mask的值，文件的最高权限不得超过mask的限定；</li>
</ul>
<h2 id="权限委派">权限委派</h2>
<ul>
<li>/etc/sudoers文件；</li>
<li>在里面添加相应的规则，使得特定用户在执行特定命令的时候可以提升到root权限（用户本身并不是root，只是可以让root帮他办事）；</li>
<li>使用方法：sudo+命令；</li>
<li>当特权用户比较多时，一般在/etc/sudoers.d的文件内新文件名为特权用户的文件，编辑该文件以添加特权；</li>
</ul>
<h2 id="扩展">扩展</h2>
<h3 id="手动修改密码">手动修改密码</h3>
<p>openssl passwd 命令：输入要设置的密码明文，随后将生成的明文编辑到对应的用户的/etc/shadow文件即可；</p>
<h3 id="修改文件权限">修改文件权限</h3>
<ul>
<li>lsattr + 文件名查看文件属性；</li>
<li>chattr + 文件名修改文件属性；</li>
</ul>
<blockquote>
<p>常用的参数（chattr +i（参数） 文件名）：</p>
<blockquote>
<p>a：只允许在文件内追加内容，不允许修改或者删除内容（普通文件）；只能在该目录下建立和修改文件，不能删除任何文件（目录）；<br>
i：不允许对这个文件进行任何修改（普通文件）；只能修改目录下的文件，不能建立或删除文件（目录）；<br>
u：删除后，会保留数据块，以供恢复数据（防止意外删除）；<br>
s：彻底删除，无法恢复文件；<br>
Link：<a href="https://en.wikipedia.org/wiki/Chattr">https://en.wikipedia.org/wiki/Chattr</a></p>
</blockquote>
</blockquote>
<h2 id="time">Time</h2>
<ul>
<li>2020.10.22：视频时间130min，博客写笔记；</li>
<li>2020.10.23：视频时间116min，博客写笔记；</li>
<li>2020.10.24：视频时间139min，博客写笔记，完成单元测试；</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第三章：学习周期四天（2020.10.18~2020.10.21，已完成✅）]]></title>
        <id>https://shley8.github.io/post/di-san-zhang-20201018~20201021dai-guan-wang/</id>
        <link href="https://shley8.github.io/post/di-san-zhang-20201018~20201021dai-guan-wang/">
        </link>
        <updated>2020-10-18T03:01:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="用户的增删改查">用户的增删改查</h2>
<h3 id="增">增</h3>
<p>使用“useradd + 用户名”添加用户；<br>
useradd shley -u 5000 -d /home/shley -s /bin/bash -&gt; 创建一个shley用户，uid为5000，家目录为/home/shley，使用的shell为/bin/bash 。</p>
<h3 id="删">删</h3>
<p>userdel + 用户名 可删除用户，默认不删除用户的家目录和邮箱（菜鸡保护机制，因为用户的家目录和有邮箱一般都是存放重要信息的地方，想都删除可加上-r参数）。</p>
<h3 id="改">改</h3>
<ul>
<li>命令：usermod（user modify）+用户名+参数；</li>
<li>usermod shley -u 5000 -d / -s /bin/bash -&gt; 将shley用户的uid修改为5000，家目录修改为根目录，默认的shell修改为/bin/bash。</li>
<li>注意：一般不会修改默认的家目录，否则会出现问题（创建用户的时候会默认参照/etc/login.defs文件创建一些东西，例如用户家目录 -&gt; GREATE_HOME参数决定，邮箱等...）。</li>
</ul>
<h3 id="查">查</h3>
<ul>
<li>id + 用户名可查看（跟grep一样，通过读取/etc/passwd文件显示用户信息的）；</li>
<li>grep + 用户名 + /etc/passwd 也可查看；</li>
</ul>
<blockquote>
<p>/etc/passwd下面记录的用户信息的规则</p>
<blockquote>
<p>总共记录7个信息用六个”:“隔开；<br>
第一个：用户名（登录名）；<br>
第二个：密码，已经删除显示，存放在/etc/shadow文件里（Unix系统以前是存放在这块的）；<br>
第三个：用户的uid，不可重复；<br>
第四个：用户所属组的ID（private group，private group、primary group、attached group三个组有何区别暂时没学习到，后面讲）；<br>
第五个：描述信息；<br>
第六个：家目录；<br>
第七个：默认shell的路径；</p>
</blockquote>
</blockquote>
<blockquote>
<p>什么文件存放什么信息</p>
<blockquote>
<p>/etc/passwd：存放用户信息；<br>
/etc/shadow：存放用户的密码信息；<br>
/etc/group：存放用户组的信息；<br>
/etc/gshadow：存放用户组的密码信息；</p>
</blockquote>
</blockquote>
<h2 id="用户组的增删改查">用户组的增删改查</h2>
<h3 id="增-2">增</h3>
<p>groupadd +组名；<br>
groupadd shley -g 5000 -&gt; 添加名为shley的组，gid为5000；</p>
<h3 id="删-2">删</h3>
<p>groupdel +组名；</p>
<h3 id="改-2">改</h3>
<p>groupmod + 组名+参数（此功能比较鸡肋）；<br>
groupmod shley -g 50000 -&gt; 修改shley用户组的gid为50000；</p>
<h3 id="查-2">查</h3>
<p>grep + 组名 + /etc/group；</p>
<blockquote>
<p>/etc/group下面记录的用户信息的规则</p>
<blockquote>
<p>每一个冒号表示一块内容；<br>
第一个：组名；<br>
第二个：密码，存放在/etc/gshadow里面，用x表示；<br>
第三个：gid；<br>
第四个：”组成员“（primary group ，默认不显示跟自己同名的用户）；</p>
</blockquote>
</blockquote>
<blockquote>
<p>用户的创建加的参数-u能指定uid，用户组的创建加-g能指定gid，uid -&gt; user ID，gid -&gt; group ID，都是唯一的；<br>
用户组分为三种，primary group（主要组），private group（私有组），attached group（附加组）；</p>
</blockquote>
<h2 id="private-groupprimary-group和attached-group的辨析">private group，primary group和attached group的辨析</h2>
<ul>
<li>private group：当创建用户未指定用户组（primarg group）的时候，系统默认会创建一个同名的组，这个组是用户的private group；</li>
<li>priamry group：
<ul>
<li>创建用户，可使用-g 参数来表明该用户的primary group（主要组）-&gt; useradd shley -g shley；</li>
<li>/etc/passwd 的第四列表示的就是该用户的primary group；</li>
<li>一个用户的private group 也可以是他的 primary group；</li>
</ul>
</li>
<li>attached group：
<ul>
<li>创建用户时，可使用-G参数来指定用户的attached group（附加组，次要组）-&gt; useradd shley -G shley；</li>
</ul>
</li>
</ul>
<blockquote>
<p>使用 id + 用户名 的时候，显示出来的gid是他的primary group，其他的全是他的attached group；</p>
</blockquote>
<h3 id="已存在的用户添加attached-group附加组的操作">已存在的用户添加attached group（附加组）的操作</h3>
<ul>
<li>
<p>usermod -G  attahced group 用户名；-&gt; 只能添加用户进一个attached group；</p>
</li>
<li>
<p>usermod -aG  attached group 用户名； -&gt; 能添加用户进入多个attached group，-a<br>
参数位置要放对，不然会报错；</p>
</li>
<li>
<p>gpasswd -a 用户名 attached group；-&gt; 添加用户进用户组（attached group）；</p>
</li>
<li>
<p>gpasswd -d 用户名 attached group； -&gt; 将用户从用户组中删除（attached group）；</p>
</li>
<li>
<p>操作完成后可使用id + 用户名查看该用户的组信息；</p>
</li>
</ul>
<h2 id="用户密码的一些知识">用户密码的一些知识</h2>
<h3 id="存放密码的文件-etcshadow各个字段的介绍">存放密码的文件-&gt; /etc/shadow各个字段的介绍</h3>
<p>密码的各个字段的信息以：隔开，共八个：九个字段；</p>
<ul>
<li>passwd + 用户名可添加用户密码；</li>
<li>第一个：该密码的用户的名字；</li>
<li>第二个：经过加密后的密码（加密方式在/etc/login.defs里面的“Use SHA512 to encrypt password”下，加密时第一二个$之间表示加密的方式，第二三个之间表示时间信息，因为在设置加密的时候考虑了时间的因素，因此即使是相同的密码，不同时间创建密码的密文也不一样）；</li>
<li>第三个：上次密码修改的时间，没修改过默认没信息（空），修改过的话以“自1970.1.1到修改密码的那天之间的差值”表示；</li>
<li>第四个：密码最短使用期（修改密码之后不能再次修改）；</li>
<li>第五个：密码最长使用期；</li>
<li>第六个：密码到期前的警告日期（提前告知）；</li>
<li>第七个：密码到期后的宽限日期（到期后还能使用）；</li>
<li>第八个：密码到期的日期；</li>
<li>第九个：保留字段；</li>
</ul>
<h3 id="passwd操作用户密码信息">passwd操作用户密码信息</h3>
<ul>
<li>使用passwd --help查看帮助；</li>
<li>passwd不能修改密码的“上次修改密码的时间”这个参数；</li>
<li>-e参数（passwd -e shley）：立刻使该用户密码失效，即该用户一上线需要立刻更改密码（Windwos Server/域环境每当新建用户时，该值默认为0 -&gt; 即登录就需要更改密码；不能设置密码失效日期，只能让用户密码立刻失效）；</li>
</ul>
<h3 id="passwd的特殊用法">passwd的特殊用法</h3>
<ul>
<li>passwd还能使用-l和-u参数来锁定和解锁一个用户（锁定之后该用户的密码前面会有!!），锁定用户之后除了root其他用户不能登录这个用户的账号；</li>
<li>使用管道符可以实现直接给用户密码赋值的操作：echo 123 | passwd --stdin（standin，标准输入）shley；</li>
</ul>
<h3 id="chagechange-age操作用户密码">chage（change age）操作用户密码</h3>
<ul>
<li>change相对于passwd命令对用户密码的操作更全面（时间方面），既可以设置密码中“上次修改密码时间”这个参数，也能指定用户密码失效时间（-E参数）；</li>
<li>“上次修改密码时间”一般为默认的（真实的上次密码修改的日期）或者为0（用户登陆时必须修改密码且对密码强度有要求）；</li>
</ul>
<h2 id="用户组密码的知识">用户组密码的知识</h2>
<ul>
<li>gpasswd + 用户组名 ：设置用户组的密码；</li>
<li>当使用一个用户创建文件时，这个文件的所有者默认为该用户，所属组默认为该用户的primary group；</li>
<li>输入newgrp + 用户组名，可暂时使用该用户组的shell，创建文件的所属组可暂时更改（attached group），如果该用户不属于该附加组，需输入组密码；</li>
</ul>
<h2 id="其他">其他</h2>
<ul>
<li>用户管理的最终目标：Authentication（认证），Anything's first step-&gt; Authorization（授权）；</li>
<li>Rhce7偏向网络管理，Rhce8偏向自动化运维；</li>
</ul>
<h2 id="time">Time</h2>
<ol>
<li>2020.10.19：视频38min，博客书写；</li>
<li>2020.10.20：视频169min，博客书写，完成单元测试；</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第二章：学习周期一周（2020.10.09~2020.10.16，未完成❌）]]></title>
        <id>https://shley8.github.io/post/di-er-zhang/</id>
        <link href="https://shley8.github.io/post/di-er-zhang/">
        </link>
        <updated>2020-10-08T07:25:09.000Z</updated>
        <content type="html"><![CDATA[<p><strong>主要内容：文件的增（普通文件、目录文件）、删（普通文件、目录文件）、改（文件的内容、属性）、查（文件的内容、属性）操作，vim编辑器的使用（文件内容修改的内容），重定向和管道，通配符和正则表达式...</strong></p>
<h2 id="shell介绍">Shell介绍</h2>
<p>Shell主要分为两种，CLI（Conmand Line Inerface，命令行接口e）和GUI（Graphical User Interface，图形用户接口），操作系统的工作原理：用户 -&gt; Shell -&gt; Kernal（包含Drive可驱动硬件） -&gt; Hardware -&gt; 执行结果反馈给用户。</p>
<h2 id="linux各个目录的作用">Linux各个目录的作用</h2>
<ul>
<li>root：root的家目录；</li>
<li>/home：用户的家目录（useradd user +passwd user，增加user用户并且修改user用户的密码）；</li>
<li>/boot：存放系统的启动配置文件和内核文件；</li>
<li>/usr：软件默认安装的地方；</li>
<li>/lib：存放的是32位的函数文件；</li>
<li>/lib64：存放的是64位的执行文件；</li>
<li>/bin：存放的是普通用户能执行的命令；</li>
<li>/sbin：存放的是超级用户能执行的命令；</li>
<li>/opt：存放软件的目录；</li>
<li>/dev：存放设备文件；</li>
<li>/etc：存放配置文件；</li>
<li>/media，/mnt，/run：挂载目录；</li>
<li>/proc：存放进程文件；</li>
<li>/srv：存放资源文件；</li>
<li>/sys：存放系统资源文件；</li>
<li>/tmp：存放临时文件（重要）；</li>
<li>/var：存放日志的文件（重要）；</li>
</ul>
<p><strong>Linux中的带箭头的图标同Windows一样都是快捷方式（例如：/bin，/sbin，/lib，/lib64，指向/usr中的对应的文件）。</strong></p>
<h2 id="命令">命令</h2>
<h3 id="小技巧">小技巧</h3>
<ul>
<li>Ctrl +Shift + t 可创建多个shell界面；</li>
<li>Ctrl + d 可关闭多个shell界面；</li>
<li>Alt + &quot;1~9&quot;可在各个shell界面来回切换；</li>
<li>Ctrl + Shift +&quot;+&quot;（F12上面的而不是小键盘上面的）放大shell界面；</li>
<li>Ctrl + &quot;-&quot;（F12上面的而不是小键盘上面的）缩小shell界面；</li>
</ul>
<h3 id="suswitch-user">su（switch user）</h3>
<ul>
<li>切换用户记得带&quot;-&quot;，切换用户的时候连同环境变量一起切换了；</li>
<li>不要一直切换用户，因为每一次切换用户，都会在当前的shell界面再加上一个shell界面，会消耗内存（操作不规范，不建议这样操作），查看当前shell界面：pstree | grep bash；</li>
<li>root用户切换到其他用户是不需要输入密码的，其他用户切换到root用户需要输入密码；</li>
</ul>
<h3 id="cdchange-directory">cd（change directory）</h3>
<ul>
<li>cd ~：切换到当前用户的家目录；</li>
<li>cd -/cd ：切换到上次所在的目录（一直使用会在两个目录之间来回跳）；</li>
<li>cd ..：切换到上级目录；</li>
</ul>
<h3 id="lslist-文件属性查看">ls（list）-&gt;文件属性查看</h3>
<ul>
<li>ls + 目录会显示目录下的文件名，ls + 文件会显示此文件的名字；</li>
<li>-l：显示文件详情；</li>
<li>-h（human）：配合-l使用，以M（兆）的方式显示文件的大小（默认为Byte（比特））；</li>
<li>-a：显示隐藏文件（以.开头的文件）；</li>
<li>-d：只目录的情况，不显示目录下的文件；</li>
</ul>
<blockquote>
<p>使用ls -l查看文件属性时，会显示文件的一些属性信息，下面分别对信息进行分析：</p>
<blockquote>
<p>1.这个文件/目录是什么：“-”表示普通文件，“d”表示目录，“b”表示块设备（存储设备），“i”表示快捷方式（软链接）；<br>
2.“.”表示该文件具备SELinux的安全上下文，“+”表示该文件有ACL权限；<br>
3.文件的链接数量；<br>
4.文件所有者对文件的权限、文件所属组对文件的权限以及其他人对文件的权限；<br>
5.文件所有者，文件所属组；<br>
6.月日时分秒，表示时间（后面会继续谈的）；<br>
7.文件/目录名字；</p>
</blockquote>
</blockquote>
<h3 id="文件内容查看">文件内容查看</h3>
<ul>
<li>cat
<ul>
<li>cat  + 文件名，可打开文件，不输文件名，进入命令交互界面，你输入什么，他输什么；</li>
</ul>
</li>
<li>head（查看文件前面的内容，默认查看10行）
<ul>
<li>head -n 5 -&gt; 查看前五行 = head -h；</li>
</ul>
</li>
<li>tail （查看文件后面的内容，默认查看10行）
<ul>
<li>tail -n 5 -&gt; 查看后五行 = tail -h；</li>
<li>tailf = tail -f  -&gt; 不断查看文件后10行，多用于查看日志文件；</li>
</ul>
</li>
<li>more -&gt; 分页查看，只能往后翻；</li>
<li>less  -&gt; 分页查看，可以前后翻阅；</li>
</ul>
<h3 id="touch-文本文件的创建">touch -&gt; 文本文件的创建</h3>
<ul>
<li>touch一个已经存在的文件，会更新该文件的时间戳，内容不会改变</li>
</ul>
<h3 id="mdkirmake-directory-目录文件的创建">mdkir（make directory） -&gt; 目录文件的创建</h3>
<ul>
<li>直接使用mkdir不能在没上级目录的时候创建下级文件（无中生有）；</li>
<li>无中生有：mkdir -p /tmp/china/pd/pd-airport；</li>
</ul>
<h3 id="rmremove-文件目录的删除">rm（remove）-&gt; 文件/目录的删除</h3>
<ul>
<li>rm 默认只能删除文件；</li>
<li>-r 赋予rm删除删除目录的权限；</li>
<li>-i 提示是否删除文件/目录；</li>
<li>-f 强制删除不提示；</li>
</ul>
<h3 id="cpcopy-文件目录的复制">cp（copy）-&gt; 文件/目录的复制</h3>
<ul>
<li>cp默认不能复制目录，需要复制目录要加“-r”参数；</li>
<li>cp如果后面是一个不存在的文件名，那么会执行复制操作并且重命名；</li>
<li>-a 复制文件的所有属性（时间戳、文件的拥有者和用户组）；</li>
<li>-i 是否覆盖原文件；</li>
</ul>
<h3 id="通配符">通配符</h3>
<ul>
<li>？：表示匹配任意一个非空字符；</li>
<li>[]：括号内存在的字符（一个）；</li>
<li>[^]：括号内不存在的字符（一个）；</li>
<li>*：任意数量的任意字符；</li>
<li>\：转义字符，使得后面的字符是它本身的意思；</li>
<li>{1..100}：有顺序的排列 -&gt; touch aa{1..100} -&gt; 创建以aa开头，1~100结尾的100个文件；</li>
</ul>
<h2 id="vim的操作">Vim的操作</h2>
<h3 id="命令模式">命令模式</h3>
<p>默认使用vim打开一个文本文件，进入的就是命令模式：</p>
<ul>
<li>
<p>hjkl：对应小键盘的左、下、上、右；</p>
</li>
<li>
<p>gg：鼠标光标切换到文本开头；</p>
</li>
<li>
<p>nG：鼠标光标切换到第n行开头；</p>
</li>
<li>
<p>x：删除鼠标光标的右边的文本；</p>
</li>
<li>
<p>X：删除鼠标光标左边的文本；</p>
</li>
<li>
<p>u：恢复上次操作的内容（理论上可以无限恢复，一直按住u即可）；</p>
</li>
<li>
<p>dd：剪切光标当前这行；</p>
</li>
<li>
<p>ndd：剪切光标当前这行以及下面n-1行；</p>
</li>
<li>
<p>yy：复制光标当前这行；</p>
</li>
<li>
<p>nyy：复制光标当前这行以及下面n-1行；</p>
</li>
<li>
<p>p：将dd或yy的内容粘贴到当前行的下面；</p>
</li>
<li>
<p>P：将dd或yy的内容粘贴到当前行的上面；</p>
</li>
</ul>
<h3 id="插入模式">插入模式</h3>
<p>在命令模式下，输入i、I、a、A、o、O均可进入到插入模式：</p>
<ul>
<li>i：鼠标光标左侧开始插入文本内容；</li>
<li>I：鼠标行首开始插入内容；</li>
<li>a：鼠标光标右侧开始插入内容；</li>
<li>A：鼠标行尾开始插入内容；</li>
<li>o：鼠标当前行重启一行开始插入（下方）；</li>
<li>O：鼠标当前行上方重启一行开始插入；</li>
</ul>
<h3 id="末行模式">末行模式</h3>
<ul>
<li>在命令模式之下，输入“：”“/”进入末行模式；</li>
<li>输入“/”，再输入文本内容，即可在当前文本中高亮显示查找到的内容，回车即可高亮显示查找到的内容，n向下查看显示的内容，N向上查看显示的内容；</li>
<li>：w（write）：保存（写入）文件；</li>
<li>：q（quit）：退出文件；</li>
<li>：q！：强制退出，不会保存文件；</li>
<li>：wq=：x：保存并且退出  -&gt; 推荐使用：w和：q配合使用；</li>
<li>：set number（set nu）：显示行号；</li>
<li>：set nonumber（set nonu）：取消显示行号；</li>
</ul>
<h3 id="可视化模式">可视化模式</h3>
<p>输入v或者V进入可视化模式，或者输入Ctrl+v进入”矩形选择版本“的可视化模式，可用于文本的剪切等操作（和命令模式差不多其实）。</p>
<h3 id="vim文本替换操作">vim文本替换操作</h3>
<p>语法格式：&quot;:n1,n2s/old content/new content/global&quot;；</p>
<ul>
<li>n1：表示开始行；</li>
<li>n2：表示结束行，</li>
<li>global：可简写为b，不加此参数，替换操作只会在每行查找到的第一个字符进行替换操作；</li>
<li>:1,$s/123/456/g：把从全文（第一行开始到最后一行结束的“123”全部替换成“456”）；</li>
</ul>
<h3 id="vim的异常处理">vim的异常处理</h3>
<ul>
<li>在使用vim文本编辑器操作的时候，会在当前目录下生成一个.swp的文件，我们的操作是对这个swp文件进行操作的，当选择保存的时候，原文件会和swp文件进行比较，然后更新文件内容。</li>
<li>在当编辑的时候出现意外时，可恢复该文本文件内容，使用vim 编辑器编辑该文件，选择“r”，然后选择回车即可。</li>
</ul>
<h2 id="重定向和管道">重定向和管道</h2>
<h3 id="输出重定向">输出重定向</h3>
<ul>
<li>&gt;：正确的内容覆盖（创建）；</li>
</ul>
<blockquote>
<p>ls &gt; test.txt （将ls命令输出在桌面的内容，输出到text.txt里面）；</p>
</blockquote>
<ul>
<li>&gt;&gt;：正确的内容在原文本后面添加上；</li>
<li>2&gt;：错误的内容覆盖（创建）；</li>
</ul>
<blockquote>
<p>dsakdjsalk 2&gt; test.txt（将dsakdjsalk命令输出的内容，输出到test.txt文件里面，因为dsakdjsalk命令不存在。所以会报错）；</p>
</blockquote>
<ul>
<li>2&gt;&gt;：错误的内容在原文本后面添加上；</li>
<li>&amp;&gt;：不论是正确的还是错误的内容都覆盖（创建）；</li>
<li>&amp;&gt;&gt;：不论是正确还是错误的内容都在原文本内容后面加上；</li>
</ul>
<h3 id="输入重定向">输入重定向</h3>
<p>输入重定向的作用是把Linux下的交互式命令变成非交互时命令；<br>
Shell脚本其实就是Linux下的命令的集合，编写shell脚本的思想就是使用非交互式命令，这样脚本才能自己动起来，输入重定向为此做了很大的贡献；</p>
<ul>
<li>&lt;：使用mail命令可进行很好的实例操作，使用输入重定向可使交互式命令变成非交互式命令，从而可以直接发送邮件 ：</li>
</ul>
<blockquote>
<p>mail -s &quot;这是邮件的主题&quot;  shley  &lt; text.txt （shley是要发送的用户，text.txt是本来命令交互时需要用户输入的内容）；</p>
</blockquote>
<ul>
<li>&lt;&lt;：实际举例：</li>
</ul>
<blockquote>
<p>cat  &gt;  test.txt  &lt;&lt;finish（test.txt是需要输入的内容，输入finish结束）；</p>
</blockquote>
<h3 id="管道介绍">管道介绍</h3>
<ul>
<li>管道要有两个命令，一个是非交互式命令，另一个是交互式命令 -&gt; 例如：ls | cat；</li>
<li>前一个命令的输出作为另一个命令的输入；</li>
</ul>
<p>使用方法分析：</p>
<blockquote>
<p>编辑已知文件shley.txt，内容为“Hello”；<br>
echo shley.txt | cat -&gt; 输出shley.txt，首先输出shley.txt，然后进入cat命令，输入shley.txt，最后屏幕显示shley.txt；<br>
echo shley.txt | xargs cat -&gt;   输出”Hello“，首先输出shlet.txt，然后将输出作为参数输入cat，所以打开shley.txt文件，输出文件内容。、</p>
</blockquote>
<h3 id="grep命令">grep命令</h3>
<p>grep命令用来抓取文本文件中需要的内容；<br>
grep配合管道可抓取任意内容（文件和文本内容），因此十分强大；</p>
<ul>
<li>ls | grep test; -&gt; 抓取文件名包含test的文件（当前目录）；</li>
<li>ls | xargs grep test; -&gt;抓取文件内容包含test的文件（当前目录）；<br>
几个常用的命令（假设创建文件shley.txt）：</li>
<li>grep -i aaa shley.txt：不分大小写抓取shley.txt中aaa文本；</li>
<li>grep -v aaa shley.txt：抓取shley.txt文本中除了aaa的内容；</li>
<li>grep -n aaa shley.txt：抓取shley.txt文本中aaa且显示行号；</li>
<li>grep -A 2 aaa shley.txt：抓取shley.txt文本中aaa以及aaa的后两行（after）；</li>
<li>grep -B 2 aaa shley.txt：抓取shley.txt文本中aaa以及aaa的前两行（before）；</li>
</ul>
<h3 id="简单的正则表达式">简单的正则表达式</h3>
<p>正则表达式是对文本文件内容的操作，标识符是对文件名的操作（不绝对）；</p>
<ul>
<li>^：以什么什么开头；</li>
<li>$：以什么什么结尾；（空格可用“^$”表示）；</li>
<li>.：匹配任意一个非空字符；</li>
<li>.*：匹配所有；</li>
</ul>
<blockquote>
<p>一个简单的使用，要求过滤文本文件内的注释（以#开头）并且过滤空格：grep ^# -v test.txt | grep ^# -v -n ；</p>
</blockquote>
<h2 id="常用的快捷键">常用的快捷键</h2>
<ul>
<li>ctrl + l ：清屏；</li>
<li>ctrl + a：光标移到最左侧；</li>
<li>ctrl + e：光标移到最右侧；</li>
<li>ctrl + u：光标所在处的左侧内容全部删除；</li>
<li>ctrl + y：恢复操作；</li>
<li>ctrl + w：光标左侧删除一个word（单词）；</li>
<li>!+一个字母（或者开头）：运行history（记录使用过的命令，输入history即可显示）里面的最近的一个以那个字母（开头）的命令； -&gt; 除非你知道自己在做什么，否则 慎重使用。</li>
</ul>
<h2 id="其他">其他</h2>
<h3 id="随便玩玩">随便玩玩</h3>
<blockquote>
<p>while (true);do echo &quot;Shilei is a handsome boy&quot;;sleep 0.5;done</p>
</blockquote>
<h3 id="基础的一些入门指令">基础的一些入门指令</h3>
<blockquote>
<p>echo<br>
date<br>
hostname<br>
hostnamectl set-hostname [修改之后的主机名]<br>
bc （交互界面）<br>
expr （非交互界面）<br>
我是谁：whoami<br>
我在哪：pwd（print work directory）<br>
我要干嘛：</p>
</blockquote>
<h2 id="知识点总结">知识点总结</h2>
<ul>
<li>文件后缀名只是文件打开的方式，当文件创建的时候文件的类型就决定了（比如.txt文件后缀修改为.pdf是打不开的）；</li>
<li>echo $PATH：当前用户使用命令的时候系统查找命令的路径，root依次为：/usr/local/sbin；/usr/local/bin；/usr/sbin；/usr/bin；/root/bin；alias；普通用户的话涉及到的sbin和bin目录会反过来（大致如此，此项总结不严谨）；</li>
</ul>
<h2 id="time">Time</h2>
<ol>
<li>2020.10.09：视频时间92min，写博客；</li>
<li>2020.10.10：视频时间73min，写博客；</li>
<li>2020.10.13：视频时间139min，写博客；</li>
<li>2020.10.14：视频时间140min，写博客；</li>
<li>2020.10.15：视频时间76min，写博客；</li>
<li>2020.10.16：视频时间136min，写博客；</li>
<li>2020.10.17：视频时间68min；</li>
<li>2020.10.18：视频时间87min，写博客，完成单元测试；</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一章：学习周期两周（2020.09.24~2020.10.8，已完成✅）]]></title>
        <id>https://shley8.github.io/post/moudle1xue-xi-zhou-qi-2-zhou/</id>
        <link href="https://shley8.github.io/post/moudle1xue-xi-zhou-qi-2-zhou/">
        </link>
        <updated>2020-10-06T02:55:34.000Z</updated>
        <content type="html"><![CDATA[<p><strong>主要内容：本章主要介绍计算机的基础知识（计算机发展历史、操作系统的发展历史、服务器的基础知识等），以及Linux（Gun/Linux）操作系统的安装...</strong></p>
<h2 id="计算机的发展历史">计算机的发展历史</h2>
<p>计算机的主要功能就是做计算，早期计算机（其实可以称为计算器）是机械计算机，用户输入数据，输入运算符（加减乘除），随后计算机进行计算，输出结果；后来随着电子管的出现，出现了电子计算机（这时候的计算机才是能通电的）；再后来随着晶体管的出现，出现了晶体管计算机，晶体管计算机的出现使得计算机的性能有了飞速的增长（目前的计算机都是集成电路计算机，而集成电路组成的基本单元就是晶体管）。</p>
<h2 id="操作系统的发展历史">操作系统的发展历史</h2>
<p>早期人们将“把数据输入到计算机—输入运算符—计算机进行运算—输出运算结果”这套流程叫做OS（Operation System，操作系统），因为早期的“操作系统”的整个流程都是需要“人”去进行操作的，后来人们就想“能不能让计算机自己去处理这些事情”，于是乎操作系统的概念就有了：操作系统是位于计算机硬件之上管理计算机硬件的一组软件，它可以让计算机自动完成输入运算输出的功能，从而让“人”解放出来。</p>
<p>操作系统的发展阶段主要分为：</p>
<ul>
<li>手工操作系统；</li>
<li>批处理系统；</li>
<li>多道程序系统；</li>
<li>分时系统；</li>
<li>实时系统；</li>
<li>通用操作系统；</li>
</ul>
<p>接下来对它们分别做一下简单的介绍：</p>
<ul>
<li>手工操作系统：“人”需要亲自动手去让计算机计算；</li>
<li>批处理操作系统：计算机的运算开始实现自动化，但是一时间只能运行一个作业（Job）；</li>
<li>多道程序系统：计算机在A作业完成之后可以进行B作业，而不用等待I/O设备的输入，增加了CPU的利用率；</li>
<li>分时系统：多个终端使用一台计算机，增加CPU的利用率；</li>
<li>实习系统：应用于某些需要计算机实时处理数据的场景（导弹系统、机票系统）；</li>
<li>通用操作系统：多道程序、分时以及实时操作系统多种的结合体；</li>
</ul>
<p>其实贯穿操作系统发展始终的一直“快速”以及“慢速”之间的矛盾，我们都知道，计算机的CPU的计算速度是比较快的，而输入输出设备（Input Output Device）和存储读写速度是比较慢的，所以操作系统的发展始终是基于提高CPU的利用率而进行的。</p>
<h2 id="几款主流的操作系统">几款主流的操作系统</h2>
<h3 id="unix">Unix</h3>
<p>Unix是第一个比较出名的操作系统，而且使用的人群也很广，但是后来因为版权的问题，使得Unix的操作性系统的推广受到了一定的阻碍，目前使用人群不是很多，而且，这款操作系统是需要收费的。<br>
代表产品：HP-UX，IBM-AIX。</p>
<h3 id="linux">Linux</h3>
<p>免费开源的操作系统，而且发展的很迅速，顺带提一下，Linux只是一个内核，不是操作系统，Gnu/Linux才是Linux的真名字，而且Gun是有自己的内核的，不过使用Linux内核成为了主流。<br>
Gun（GNU is Not Unix）是一个号召全世界的开发人员从事软件开源的一个计划。<br>
代表产品：Fedora，CentOS，Ubuntu，OpenSuSE，RHEL（Red Hat Enterprise Linux）。</p>
<h3 id="mac-os">Mac OS</h3>
<p>Unix的变种（分支）。</p>
<h3 id="windows">Windows</h3>
<p>Unix的官司给Windows和Mac OS提供了一个非常好的发展背景，Winodws用户主要集中在个人用户，<br>
代表产品：Win 7，Win10，Windows Server *。</p>
<h2 id="计算机硬件组成">计算机硬件组成</h2>
<p>主板、CPU、存储、输入输出设备、网卡、显卡、声卡 and 等等。</p>
<p>这里主要说一下CPU和存储：</p>
<ul>
<li>CPU（Central Processing Unit，中央处理器），计算机的核心之一，内部分为三个单元，逻辑控制单元，逻辑运算单元，存储（寄存器，L1 cache，L2 cache，L3 cache），性能主要是三个指标：主频数（计算速度的快慢）、核心数（能同时进行计算的多少）、存储大小（读写输入的快慢，记得我们前面说过，CPU运算是比较快的，而从存储里面读写数据是比较慢的）。</li>
<li>存储：读写速度从快到慢，容量从小到大排列为：寄存器，L1 cache，L2 cache，L3 cache，内存，硬盘。</li>
</ul>
<h2 id="常见的服务器分类">常见的服务器分类</h2>
<p>常见的服务器主要分为三种：</p>
<ul>
<li>塔式服务器；</li>
<li>机架式服务器；</li>
<li>刀片式服务器。</li>
</ul>
<p>以及一些小知识：</p>
<ul>
<li>数据中心的电源一般都是两个，两个电源分别接入不同的发电站，确保服务器不会因为缺电停止工作（部分会采用UPS电源，即使断电，短时间内服务器还会继续运行，类似于电池）。<br>
针对某些读/写操作比较大的业务情况（如百度的原理即用户输入想要的内容，百度从自己的数据库中读内容，然后返回给用户；微信红包则是写入的情况），公司的服务器会采用缓存/缓冲技术来应对（从内存中读取数据/从在内存中写入数据）。</li>
</ul>
<p>服务器CPU选择的问题：</p>
<ul>
<li>当应用单线程消耗资源比较多时，选择主频较高的CPU（需要处理某一项业务花费较长时间，业务可能不会有很多）；</li>
<li>如果服务器是用于虚拟化业务，那么选择核心数比较多的CPU（处理单项业务不许需要很长时间，但业务很多）。</li>
</ul>
<h2 id="如何安装操作系统windows">如何安装操作系统（Windows）</h2>
<p>准备工作：一台需要安装操作系统的主机、ISO文件、U盘（大小合适，8G即可）、软碟通软件。</p>
<p>操作步骤：将ISO文件通过软碟通进行考录，制作一个用于装机的U盘，进入计算机的BIOS界面，用此U盘进行操作系统的安装即可（BIOS界面根据自己电脑的不同，进入方式也不同，通常在计算机重启时按F1~12即可进入，Dell游匣是F12，笔者自己电脑）。</p>
<h2 id="单元考核知识点总结">单元考核知识点总结</h2>
<ol>
<li>计算机的发展阶段：机械（计算机）-&gt;电子管-&gt;晶体管-&gt;集成电路；</li>
<li>操作系统工作原理：用户（User）-&gt;APP-&gt;Shell（包括CLI和GUI界面）-&gt;操作系统内核（Kernal）-&gt;硬件（Hardware）；</li>
<li>Windows发展阶段：Windows1，2，3，95，98，ME，XP，Vista，7，8，10；</li>
<li>使用较长时间的电脑出现卡顿的情况，可以将硬盘更换成固态；</li>
<li>计算机的两大组件：硬件、软件；</li>
<li>服务器主要组成：硬盘，内存，远程管理卡，主板，CPU，阵列卡，网卡，电源，风扇...；</li>
<li>云计算的基础知识：网络知识，操作系统知识，存储知识，虚拟化知识；</li>
<li>VMware Workstation（个人认为绝大多数软件和硬件）具有向下兼容和向上不兼容性；</li>
<li>使用VMware Workstation创建动态快照和静态快照时，动态快照比静态快照占用的空间更大，因为动态快照还会备份虚拟机的内存（内存在断电后就没了）；</li>
</ol>
<h2 id="其他">其他</h2>
<ol>
<li>安装CentOS，笔记本上使用Ctrl+Fn+Alt+F1~F6可进入不同的用户界面；</li>
<li>CentOS和RHEL，进入界面推荐选择第三个经典（Classic）界面，比较友善一点；</li>
<li>VMware Workstation链接克隆的本质就是快照（相对的是完整克隆）；</li>
<li>VMware Workstation静态快照和动态快照（自己思考）；</li>
<li>CentOS和RHEL差不多，Ubuntu界面不错，Fedora体验很好（支持IP访问的操作）；</li>
<li>网络+操作系统+存储+虚拟化 -&gt; 云计算；</li>
<li>RHCA方向：DC（数据中心)，Storage（存储），Cloud（云计算）；</li>
<li>虚拟化是一个技术，云计算是一个理念（云计算：利用虚拟化的技术，对需要的用户提供弹性的服务，包括计算的资源、网络的资源、存储的资源，如：百度云）；</li>
</ol>
<h2 id="time">Time</h2>
<ol>
<li>2020.10.07：视频时间201min，完成第一章的练习题；</li>
<li>2020.10.08：视频时间215min，更新博客；</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RHCE（Red Hat Certified Engineer）学习过程记录]]></title>
        <id>https://shley8.github.io/post/rhcered-hat-certified-engineerxue-xi-guo-cheng-ji-lu/</id>
        <link href="https://shley8.github.io/post/rhcered-hat-certified-engineerxue-xi-guo-cheng-ji-lu/">
        </link>
        <updated>2020-10-06T02:54:11.000Z</updated>
        <content type="html"><![CDATA[<p>2020.9.24 星期四报名的RHCE，在工作之余每天计划学习两个小时的课程，达到或者超过网站安排的教学计划， 每个学习周期记录一次，希望能不忘初心，早日考下RHCE证书😊。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://shley8.github.io/post/hello-gridea/</id>
        <link href="https://shley8.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>